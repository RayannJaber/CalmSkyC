
ImportCom.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000138  00800100  000014fa  0000158e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000014fa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000572  00800238  00800238  000016c6  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000016c6  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000248  00000000  00000000  00001728  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001f5b  00000000  00000000  00001970  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000816  00000000  00000000  000038cb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000009d7  00000000  00000000  000040e1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000004b4  00000000  00000000  00004ab8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000804  00000000  00000000  00004f6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000154b  00000000  00000000  00005770  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000200  00000000  00000000  00006cbb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 13 01 	jmp	0x226	; 0x226 <OSTickISR>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <SerTxISR>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	12 e0       	ldi	r17, 0x02	; 2
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	ea ef       	ldi	r30, 0xFA	; 250
      7c:	f4 e1       	ldi	r31, 0x14	; 20
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	a8 33       	cpi	r26, 0x38	; 56
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	27 e0       	ldi	r18, 0x07	; 7
      8c:	a8 e3       	ldi	r26, 0x38	; 56
      8e:	b2 e0       	ldi	r27, 0x02	; 2
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	aa 3a       	cpi	r26, 0xAA	; 170
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 b7 02 	call	0x56e	; 0x56e <main>
      9e:	0c 94 7b 0a 	jmp	0x14f6	; 0x14f6 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <OSStartHighRdy>:

OSStartHighRdy: 
#if OS_TASK_SW_HOOK_EN > 0
	        call    OSTaskSwHook                ; Invoke user defined context switch hook
#endif
                lds     R16,OSRunning               ; Indicate that we are multitasking
      a6:	00 91 b0 06 	lds	r16, 0x06B0
                inc     R16                         ;
      aa:	03 95       	inc	r16
                sts     OSRunning,R16               ;
      ac:	00 93 b0 06 	sts	0x06B0, r16

                lds     R30,OSTCBHighRdy            ; Let Z point to TCB of highest priority task
      b0:	e0 91 c5 06 	lds	r30, 0x06C5
                lds     R31,OSTCBHighRdy+1          ; ready to run
      b4:	f0 91 c6 06 	lds	r31, 0x06C6

                ld      R28,Z+                      ; Load stack L pointer
      b8:	c1 91       	ld	r28, Z+
                out     _SFR_IO_ADDR(SPL),R28
      ba:	cd bf       	out	0x3d, r28	; 61
                ld      R29,Z+                      ;
      bc:	d1 91       	ld	r29, Z+
                out     _SFR_IO_ADDR(SPH),R29
      be:	de bf       	out	0x3e, r29	; 62

                POPSREG                             ; Pop the status register
      c0:	0f 91       	pop	r16
      c2:	0f bf       	out	0x3f, r16	; 63
                POPRS                               ; Pop all registers
      c4:	ff 91       	pop	r31
      c6:	ef 91       	pop	r30
      c8:	df 91       	pop	r29
      ca:	cf 91       	pop	r28
      cc:	bf 91       	pop	r27
      ce:	af 91       	pop	r26
      d0:	9f 91       	pop	r25
      d2:	8f 91       	pop	r24
      d4:	7f 91       	pop	r23
      d6:	6f 91       	pop	r22
      d8:	5f 91       	pop	r21
      da:	4f 91       	pop	r20
      dc:	3f 91       	pop	r19
      de:	2f 91       	pop	r18
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	df 90       	pop	r13
      ea:	cf 90       	pop	r12
      ec:	bf 90       	pop	r11
      ee:	af 90       	pop	r10
      f0:	9f 90       	pop	r9
      f2:	8f 90       	pop	r8
      f4:	7f 90       	pop	r7
      f6:	6f 90       	pop	r6
      f8:	5f 90       	pop	r5
      fa:	4f 90       	pop	r4
      fc:	3f 90       	pop	r3
      fe:	2f 90       	pop	r2
     100:	1f 90       	pop	r1
     102:	0f 90       	pop	r0
                ret                                 ; Start task
     104:	08 95       	ret

00000106 <OSCtxSw>:
;                                                R0
;                                                PCH
;                                                PCL                                     (High memory)
;********************************************************************************************************

OSCtxSw:        PUSHRS                              ; Save current tasks context
     106:	0f 92       	push	r0
     108:	1f 92       	push	r1
     10a:	2f 92       	push	r2
     10c:	3f 92       	push	r3
     10e:	4f 92       	push	r4
     110:	5f 92       	push	r5
     112:	6f 92       	push	r6
     114:	7f 92       	push	r7
     116:	8f 92       	push	r8
     118:	9f 92       	push	r9
     11a:	af 92       	push	r10
     11c:	bf 92       	push	r11
     11e:	cf 92       	push	r12
     120:	df 92       	push	r13
     122:	ef 92       	push	r14
     124:	ff 92       	push	r15
     126:	0f 93       	push	r16
     128:	1f 93       	push	r17
     12a:	2f 93       	push	r18
     12c:	3f 93       	push	r19
     12e:	4f 93       	push	r20
     130:	5f 93       	push	r21
     132:	6f 93       	push	r22
     134:	7f 93       	push	r23
     136:	8f 93       	push	r24
     138:	9f 93       	push	r25
     13a:	af 93       	push	r26
     13c:	bf 93       	push	r27
     13e:	cf 93       	push	r28
     140:	df 93       	push	r29
     142:	ef 93       	push	r30
     144:	ff 93       	push	r31
                PUSHSREG                            ; Save SREG
     146:	0f b7       	in	r16, 0x3f	; 63
     148:	0f 93       	push	r16

                lds     R30,OSTCBCur                ; Z = OSTCBCur->OSTCBStkPtr
     14a:	e0 91 d3 06 	lds	r30, 0x06D3
                lds     R31,OSTCBCur+1              ;
     14e:	f0 91 d4 06 	lds	r31, 0x06D4

                in      r28,_SFR_IO_ADDR(SPL)
     152:	cd b7       	in	r28, 0x3d	; 61
                st      Z+,R28                      ; Save Y (R29:R28) pointer
     154:	c1 93       	st	Z+, r28
                in      r29,_SFR_IO_ADDR(SPH)
     156:	de b7       	in	r29, 0x3e	; 62
                st      Z+,R29                      ;
     158:	d1 93       	st	Z+, r29

#if OS_TASK_SW_HOOK_EN > 0
                call    OSTaskSwHook                ; Call user defined task switch hook
#endif

                lds     R16,OSPrioHighRdy           ; OSPrioCur = OSPrioHighRdy
     15a:	00 91 b5 06 	lds	r16, 0x06B5
                sts     OSPrioCur,R16
     15e:	00 93 b6 06 	sts	0x06B6, r16

                lds     R30,OSTCBHighRdy            ; Let Z point to TCB of highest priority task
     162:	e0 91 c5 06 	lds	r30, 0x06C5
                lds     R31,OSTCBHighRdy+1          ; ready to run
     166:	f0 91 c6 06 	lds	r31, 0x06C6
                sts     OSTCBCur,R30                ; OSTCBCur = OSTCBHighRdy
     16a:	e0 93 d3 06 	sts	0x06D3, r30
                sts     OSTCBCur+1,R31              ;
     16e:	f0 93 d4 06 	sts	0x06D4, r31

                ld      R28,Z+                      ; Restore Y pointer
     172:	c1 91       	ld	r28, Z+
                out     _SFR_IO_ADDR(SPL),R28
     174:	cd bf       	out	0x3d, r28	; 61
                ld      R29,Z+                      ;
     176:	d1 91       	ld	r29, Z+
                out     _SFR_IO_ADDR(SPH),R29
     178:	de bf       	out	0x3e, r29	; 62

                POPSREG                             ; Restore the status register
     17a:	0f 91       	pop	r16
     17c:	0f bf       	out	0x3f, r16	; 63
                POPRS                               ; Restore all registers
     17e:	ff 91       	pop	r31
     180:	ef 91       	pop	r30
     182:	df 91       	pop	r29
     184:	cf 91       	pop	r28
     186:	bf 91       	pop	r27
     188:	af 91       	pop	r26
     18a:	9f 91       	pop	r25
     18c:	8f 91       	pop	r24
     18e:	7f 91       	pop	r23
     190:	6f 91       	pop	r22
     192:	5f 91       	pop	r21
     194:	4f 91       	pop	r20
     196:	3f 91       	pop	r19
     198:	2f 91       	pop	r18
     19a:	1f 91       	pop	r17
     19c:	0f 91       	pop	r16
     19e:	ff 90       	pop	r15
     1a0:	ef 90       	pop	r14
     1a2:	df 90       	pop	r13
     1a4:	cf 90       	pop	r12
     1a6:	bf 90       	pop	r11
     1a8:	af 90       	pop	r10
     1aa:	9f 90       	pop	r9
     1ac:	8f 90       	pop	r8
     1ae:	7f 90       	pop	r7
     1b0:	6f 90       	pop	r6
     1b2:	5f 90       	pop	r5
     1b4:	4f 90       	pop	r4
     1b6:	3f 90       	pop	r3
     1b8:	2f 90       	pop	r2
     1ba:	1f 90       	pop	r1
     1bc:	0f 90       	pop	r0
                ret
     1be:	08 95       	ret

000001c0 <OSIntCtxSw>:
;*********************************************************************************************************

#if OS_TASK_SW_HOOK_EN > 0
                call    OSTaskSwHook                ; Call user defined task switch hook
#endif
                lds     R16,OSPrioHighRdy           ; OSPrioCur = OSPrioHighRdy
     1c0:	00 91 b5 06 	lds	r16, 0x06B5
                sts     OSPrioCur,R16               ;
     1c4:	00 93 b6 06 	sts	0x06B6, r16

                lds     R30,OSTCBHighRdy            ; Z = OSTCBHighRdy->OSTCBStkPtr
     1c8:	e0 91 c5 06 	lds	r30, 0x06C5
                lds     R31,OSTCBHighRdy+1          ;
     1cc:	f0 91 c6 06 	lds	r31, 0x06C6
                sts     OSTCBCur,R30                ; OSTCBCur = OSTCBHighRdy
     1d0:	e0 93 d3 06 	sts	0x06D3, r30
                sts     OSTCBCur+1,R31              ;
     1d4:	f0 93 d4 06 	sts	0x06D4, r31

                ld      R28,Z+                      ; Restore Y pointer
     1d8:	c1 91       	ld	r28, Z+
                out     _SFR_IO_ADDR(SPL),R28
     1da:	cd bf       	out	0x3d, r28	; 61
                ld      R29,Z+                      ;
     1dc:	d1 91       	ld	r29, Z+
                out     _SFR_IO_ADDR(SPH),R29
     1de:	de bf       	out	0x3e, r29	; 62

                POPSREG                             ; Restore the status register
     1e0:	0f 91       	pop	r16
     1e2:	0f bf       	out	0x3f, r16	; 63
                POPRS                               ; Restore all registers
     1e4:	ff 91       	pop	r31
     1e6:	ef 91       	pop	r30
     1e8:	df 91       	pop	r29
     1ea:	cf 91       	pop	r28
     1ec:	bf 91       	pop	r27
     1ee:	af 91       	pop	r26
     1f0:	9f 91       	pop	r25
     1f2:	8f 91       	pop	r24
     1f4:	7f 91       	pop	r23
     1f6:	6f 91       	pop	r22
     1f8:	5f 91       	pop	r21
     1fa:	4f 91       	pop	r20
     1fc:	3f 91       	pop	r19
     1fe:	2f 91       	pop	r18
     200:	1f 91       	pop	r17
     202:	0f 91       	pop	r16
     204:	ff 90       	pop	r15
     206:	ef 90       	pop	r14
     208:	df 90       	pop	r13
     20a:	cf 90       	pop	r12
     20c:	bf 90       	pop	r11
     20e:	af 90       	pop	r10
     210:	9f 90       	pop	r9
     212:	8f 90       	pop	r8
     214:	7f 90       	pop	r7
     216:	6f 90       	pop	r6
     218:	5f 90       	pop	r5
     21a:	4f 90       	pop	r4
     21c:	3f 90       	pop	r3
     21e:	2f 90       	pop	r2
     220:	1f 90       	pop	r1
     222:	0f 90       	pop	r0
                ret
     224:	08 95       	ret

00000226 <OSTickISR>:
; won't get vectored.
;
;********************************************************************************************************
.global TIMER0_OVF_vect
TIMER0_OVF_vect:
OSTickISR:      PUSHRS                              ; Save all registers
     226:	0f 92       	push	r0
     228:	1f 92       	push	r1
     22a:	2f 92       	push	r2
     22c:	3f 92       	push	r3
     22e:	4f 92       	push	r4
     230:	5f 92       	push	r5
     232:	6f 92       	push	r6
     234:	7f 92       	push	r7
     236:	8f 92       	push	r8
     238:	9f 92       	push	r9
     23a:	af 92       	push	r10
     23c:	bf 92       	push	r11
     23e:	cf 92       	push	r12
     240:	df 92       	push	r13
     242:	ef 92       	push	r14
     244:	ff 92       	push	r15
     246:	0f 93       	push	r16
     248:	1f 93       	push	r17
     24a:	2f 93       	push	r18
     24c:	3f 93       	push	r19
     24e:	4f 93       	push	r20
     250:	5f 93       	push	r21
     252:	6f 93       	push	r22
     254:	7f 93       	push	r23
     256:	8f 93       	push	r24
     258:	9f 93       	push	r25
     25a:	af 93       	push	r26
     25c:	bf 93       	push	r27
     25e:	cf 93       	push	r28
     260:	df 93       	push	r29
     262:	ef 93       	push	r30
     264:	ff 93       	push	r31
                PUSHSREGISR                         ; Save SREG with I bit set!
     266:	0f b7       	in	r16, 0x3f	; 63
     268:	00 68       	ori	r16, 0x80	; 128
     26a:	0f 93       	push	r16

                lds     R16,OSIntNesting            ; Notify uC/OS-II of ISR
     26c:	00 91 d2 06 	lds	r16, 0x06D2
                inc     R16                         ;
     270:	03 95       	inc	r16
                sts     OSIntNesting,R16            ;
     272:	00 93 d2 06 	sts	0x06D2, r16
; You should disable the lines between #if 1 and #endif if you use uC/OS-II version 2.51 or below!
; (Unfortunately OS_VERSION is not defined here (how to do it elegantly? On possibility would be to
;  code this ISR with C in os_cpu_c.c or use inline assembler in os_cpu_c.c)
;*********************************************************************************************************
#if 1
                cpi     R16,0x01
     276:	01 30       	cpi	r16, 0x01	; 1
                brne    _not_first_int
     278:	41 f4       	brne	.+16     	; 0x28a <_not_first_int>

                in      R28,_SFR_IO_ADDR(SPL)       ; Z = SP
     27a:	cd b7       	in	r28, 0x3d	; 61
                in      R29,_SFR_IO_ADDR(SPH)
     27c:	de b7       	in	r29, 0x3e	; 62
                lds     R30,OSTCBCur                ; Z = OSTCBCur->OSTCBStkPtr
     27e:	e0 91 d3 06 	lds	r30, 0x06D3
                lds     R31,OSTCBCur+1              ;
     282:	f0 91 d4 06 	lds	r31, 0x06D4
                st      Z+,R28                      ; Save Y pointer
     286:	c1 93       	st	Z+, r28
                st      Z+,R29                      ;
     288:	d1 93       	st	Z+, r29

0000028a <_not_first_int>:
_not_first_int:
#endif
                ldi     R16,256-(CPU_CLOCK_HZ/OS_TICKS_PER_SEC/1024)   
     28a:	09 ed       	ldi	r16, 0xD9	; 217
                                                    ; Reload timer to overflow at a rate of OS_TICKS_PER_SEC
                out     _SFR_IO_ADDR(TCNT0),R16     ; at a prescaler of 1024 and CPU_CLOCK_HZ AVR clock
     28c:	06 bd       	out	0x26, r16	; 38
	
                sei                                 ; Enable interrupts
     28e:	78 94       	sei
                
                call    OSTimeTick                  ; Call uC/OS-IIs tick updating function
     290:	0e 94 09 05 	call	0xa12	; 0xa12 <OSTimeTick>
                nop
     294:	00 00       	nop
                call    OSIntExit                   ; Notify uC/OS-II about end of ISR
     296:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <OSIntExit>

                POPSREG
     29a:	0f 91       	pop	r16
     29c:	0f bf       	out	0x3f, r16	; 63
                POPRS                               ; Restore all registers and status register
     29e:	ff 91       	pop	r31
     2a0:	ef 91       	pop	r30
     2a2:	df 91       	pop	r29
     2a4:	cf 91       	pop	r28
     2a6:	bf 91       	pop	r27
     2a8:	af 91       	pop	r26
     2aa:	9f 91       	pop	r25
     2ac:	8f 91       	pop	r24
     2ae:	7f 91       	pop	r23
     2b0:	6f 91       	pop	r22
     2b2:	5f 91       	pop	r21
     2b4:	4f 91       	pop	r20
     2b6:	3f 91       	pop	r19
     2b8:	2f 91       	pop	r18
     2ba:	1f 91       	pop	r17
     2bc:	0f 91       	pop	r16
     2be:	ff 90       	pop	r15
     2c0:	ef 90       	pop	r14
     2c2:	df 90       	pop	r13
     2c4:	cf 90       	pop	r12
     2c6:	bf 90       	pop	r11
     2c8:	af 90       	pop	r10
     2ca:	9f 90       	pop	r9
     2cc:	8f 90       	pop	r8
     2ce:	7f 90       	pop	r7
     2d0:	6f 90       	pop	r6
     2d2:	5f 90       	pop	r5
     2d4:	4f 90       	pop	r4
     2d6:	3f 90       	pop	r3
     2d8:	2f 90       	pop	r2
     2da:	1f 90       	pop	r1
     2dc:	0f 90       	pop	r0
                ret                                 ; Note: RET instead of RETI
     2de:	08 95       	ret

000002e0 <WatchDogReset>:



.global WatchDogReset
WatchDogReset:
				wdr									; tickle the watchdog timer
     2e0:	a8 95       	wdr
				ret
     2e2:	08 95       	ret

000002e4 <SerTxISR>:
				

.global USART_TX_vect							   ; Transmit Complete Interrupt
USART_TX_vect:
SerTxISR:   
				PUSHRS                              ; Save current tasks context
     2e4:	0f 92       	push	r0
     2e6:	1f 92       	push	r1
     2e8:	2f 92       	push	r2
     2ea:	3f 92       	push	r3
     2ec:	4f 92       	push	r4
     2ee:	5f 92       	push	r5
     2f0:	6f 92       	push	r6
     2f2:	7f 92       	push	r7
     2f4:	8f 92       	push	r8
     2f6:	9f 92       	push	r9
     2f8:	af 92       	push	r10
     2fa:	bf 92       	push	r11
     2fc:	cf 92       	push	r12
     2fe:	df 92       	push	r13
     300:	ef 92       	push	r14
     302:	ff 92       	push	r15
     304:	0f 93       	push	r16
     306:	1f 93       	push	r17
     308:	2f 93       	push	r18
     30a:	3f 93       	push	r19
     30c:	4f 93       	push	r20
     30e:	5f 93       	push	r21
     310:	6f 93       	push	r22
     312:	7f 93       	push	r23
     314:	8f 93       	push	r24
     316:	9f 93       	push	r25
     318:	af 93       	push	r26
     31a:	bf 93       	push	r27
     31c:	cf 93       	push	r28
     31e:	df 93       	push	r29
     320:	ef 93       	push	r30
     322:	ff 93       	push	r31
                PUSHSREGISR                             ; Save SREG with ISR bit set
     324:	0f b7       	in	r16, 0x3f	; 63
     326:	00 68       	ori	r16, 0x80	; 128
     328:	0f 93       	push	r16
				lds     R16,OSIntNesting            ; Notify uC/OS-II of ISR
     32a:	00 91 d2 06 	lds	r16, 0x06D2
                inc     R16                         ;
     32e:	03 95       	inc	r16
                sts     OSIntNesting,R16            ;
     330:	00 93 d2 06 	sts	0x06D2, r16
   
				call	PostTxCompleteSem			; post semaphore stating that buffer is empty
     334:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <PostTxCompleteSem>
				call    OSIntExit                   ; Notify uC/OS-II about end of ISR
     338:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <OSIntExit>
				POPSREG
     33c:	0f 91       	pop	r16
     33e:	0f bf       	out	0x3f, r16	; 63
                POPRS 
     340:	ff 91       	pop	r31
     342:	ef 91       	pop	r30
     344:	df 91       	pop	r29
     346:	cf 91       	pop	r28
     348:	bf 91       	pop	r27
     34a:	af 91       	pop	r26
     34c:	9f 91       	pop	r25
     34e:	8f 91       	pop	r24
     350:	7f 91       	pop	r23
     352:	6f 91       	pop	r22
     354:	5f 91       	pop	r21
     356:	4f 91       	pop	r20
     358:	3f 91       	pop	r19
     35a:	2f 91       	pop	r18
     35c:	1f 91       	pop	r17
     35e:	0f 91       	pop	r16
     360:	ff 90       	pop	r15
     362:	ef 90       	pop	r14
     364:	df 90       	pop	r13
     366:	cf 90       	pop	r12
     368:	bf 90       	pop	r11
     36a:	af 90       	pop	r10
     36c:	9f 90       	pop	r9
     36e:	8f 90       	pop	r8
     370:	7f 90       	pop	r7
     372:	6f 90       	pop	r6
     374:	5f 90       	pop	r5
     376:	4f 90       	pop	r4
     378:	3f 90       	pop	r3
     37a:	2f 90       	pop	r2
     37c:	1f 90       	pop	r1
     37e:	0f 90       	pop	r0

			    ret
     380:	08 95       	ret

00000382 <TaskStart>:
 */
void TaskStart (void *pdata)
{
    pdata = pdata;                                         /* Prevent compiler warning                 */

	OSStatInit();                                          /* Initialize uC/OS-II's statistics         */
     382:	0e 94 c2 06 	call	0xd84	; 0xd84 <OSStatInit>

	OSTaskCreate(NeuroSkyTask, (void *)0, &TaskTimerStk[TRANSMIT_TASK_STK_SIZE - 1], 30);
     386:	2e e1       	ldi	r18, 0x1E	; 30
     388:	44 e5       	ldi	r20, 0x54	; 84
     38a:	55 e0       	ldi	r21, 0x05	; 5
     38c:	60 e0       	ldi	r22, 0x00	; 0
     38e:	70 e0       	ldi	r23, 0x00	; 0
     390:	89 ed       	ldi	r24, 0xD9	; 217
     392:	91 e0       	ldi	r25, 0x01	; 1
     394:	0e 94 b1 05 	call	0xb62	; 0xb62 <OSTaskCreate>
	//OSTaskCreate(CustomTask,NULL,&TaskLedStk[TASK_STK_SIZE - 1], 7);
	//OSTaskCreate(SerialTransmitTask, (void *) 0, &SerialTransmitTaskStk[TRANSMIT_TASK_STK_SIZE-1], 20);

    for (;;) {
        OSCtxSwCtr = 0;                         /* Clear context switch counter             */
     398:	10 92 b9 06 	sts	0x06B9, r1
     39c:	10 92 ba 06 	sts	0x06BA, r1
     3a0:	10 92 bb 06 	sts	0x06BB, r1
     3a4:	10 92 bc 06 	sts	0x06BC, r1
        OSTimeDly(OS_TICKS_PER_SEC);			/* Wait one second                          */
     3a8:	88 ec       	ldi	r24, 0xC8	; 200
     3aa:	90 e0       	ldi	r25, 0x00	; 0
     3ac:	0e 94 a3 06 	call	0xd46	; 0xd46 <OSTimeDly>
     3b0:	f3 cf       	rjmp	.-26     	; 0x398 <TaskStart+0x16>

000003b2 <NeuroSkyTask>:
	
}

void NeuroSkyTask(void *pdata) {    

	stdin = &uart_input;
     3b2:	80 e0       	ldi	r24, 0x00	; 0
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	90 93 a5 07 	sts	0x07A5, r25
     3ba:	80 93 a4 07 	sts	0x07A4, r24
	stdout = &uart_output;
     3be:	8e e0       	ldi	r24, 0x0E	; 14
     3c0:	91 e0       	ldi	r25, 0x01	; 1
     3c2:	90 93 a7 07 	sts	0x07A7, r25
     3c6:	80 93 a6 07 	sts	0x07A6, r24
	uart_init();
     3ca:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <uart_init>
    char genchecksum =0; 
	char checksum =0;
	int payload = 0;         
    char input;
	DDRB = 0xFF;
     3ce:	8f ef       	ldi	r24, 0xFF	; 255
     3d0:	84 b9       	out	0x04, r24	; 4
    while(1) {
		//OSTimeDly(1);
		input = getchar();
     3d2:	c4 ea       	ldi	r28, 0xA4	; 164
     3d4:	d7 e0       	ldi	r29, 0x07	; 7
							break;
						case 5:
							i++;
							meditation = payloadData[i];
							
							printf("\r\nMeditation: %u\r\n",meditation);
     3d6:	0f 2e       	mov	r0, r31
     3d8:	fc e1       	ldi	r31, 0x1C	; 28
     3da:	4f 2e       	mov	r4, r31
     3dc:	f1 e0       	ldi	r31, 0x01	; 1
     3de:	5f 2e       	mov	r5, r31
     3e0:	f0 2d       	mov	r31, r0
     3e2:	0f 2e       	mov	r0, r31
     3e4:	f1 e8       	ldi	r31, 0x81	; 129
     3e6:	af 2e       	mov	r10, r31
     3e8:	f3 e0       	ldi	r31, 0x03	; 3
     3ea:	bf 2e       	mov	r11, r31
     3ec:	f0 2d       	mov	r31, r0
     3ee:	0f 2e       	mov	r0, r31
     3f0:	f1 e7       	ldi	r31, 0x71	; 113
     3f2:	2f 2e       	mov	r2, r31
     3f4:	f3 e0       	ldi	r31, 0x03	; 3
     3f6:	3f 2e       	mov	r3, r31
     3f8:	f0 2d       	mov	r31, r0
	int payload = 0;         
    char input;
	DDRB = 0xFF;
    while(1) {
		//OSTimeDly(1);
		input = getchar();
     3fa:	88 81       	ld	r24, Y
     3fc:	99 81       	ldd	r25, Y+1	; 0x01
     3fe:	0e 94 7a 07 	call	0xef4	; 0xef4 <fgetc>
		//UDR0 = 'c';


		
		if(input == 170){ //start byte
     402:	8a 3a       	cpi	r24, 0xAA	; 170
     404:	d1 f7       	brne	.-12     	; 0x3fa <NeuroSkyTask+0x48>
			input = getchar();			
     406:	88 81       	ld	r24, Y
     408:	99 81       	ldd	r25, Y+1	; 0x01
     40a:	0e 94 7a 07 	call	0xef4	; 0xef4 <fgetc>
			if(input == 170){
     40e:	8a 3a       	cpi	r24, 0xAA	; 170
     410:	a1 f7       	brne	.-24     	; 0x3fa <NeuroSkyTask+0x48>
				//printf("Scanning!\r\n");
				payload = getchar();
     412:	88 81       	ld	r24, Y
     414:	99 81       	ldd	r25, Y+1	; 0x01
     416:	0e 94 7a 07 	call	0xef4	; 0xef4 <fgetc>
     41a:	6c 01       	movw	r12, r24
				if(payload > MAXPAYLOAD)                      //Payload length can not be greater than 169
     41c:	8a ea       	ldi	r24, 0xAA	; 170
     41e:	c8 16       	cp	r12, r24
     420:	d1 04       	cpc	r13, r1
     422:	5c f7       	brge	.-42     	; 0x3fa <NeuroSkyTask+0x48>
				
				//memset(payloadData,0,sizeof(payloadData[0])*MAXPAYLOAD); //clear array for use
				//for(int i =0; i < MAXPAYLOAD; i++)
				//	payloadData[i] = 0;
				//printf("payload: %u\r\n ",payload);
				for(int i =0; i < payload; i++){
     424:	1c 14       	cp	r1, r12
     426:	1d 04       	cpc	r1, r13
     428:	dc f4       	brge	.+54     	; 0x460 <NeuroSkyTask+0xae>
     42a:	0f 2e       	mov	r0, r31
     42c:	f1 e8       	ldi	r31, 0x81	; 129
     42e:	8f 2e       	mov	r8, r31
     430:	f3 e0       	ldi	r31, 0x03	; 3
     432:	9f 2e       	mov	r9, r31
     434:	f0 2d       	mov	r31, r0
     436:	86 01       	movw	r16, r12
     438:	00 0f       	add	r16, r16
     43a:	11 1f       	adc	r17, r17
     43c:	0f 57       	subi	r16, 0x7F	; 127
     43e:	1c 4f       	sbci	r17, 0xFC	; 252
     440:	71 2c       	mov	r7, r1
					input = getchar(); //read next [payload] bytes and save them		
     442:	88 81       	ld	r24, Y
     444:	99 81       	ldd	r25, Y+1	; 0x01
     446:	0e 94 7a 07 	call	0xef4	; 0xef4 <fgetc>
					payloadData[i] = input;
     44a:	9c 01       	movw	r18, r24
     44c:	33 27       	eor	r19, r19
     44e:	f4 01       	movw	r30, r8
     450:	21 93       	st	Z+, r18
     452:	31 93       	st	Z+, r19
     454:	4f 01       	movw	r8, r30
					genchecksum += input;					
     456:	78 0e       	add	r7, r24
				
				//memset(payloadData,0,sizeof(payloadData[0])*MAXPAYLOAD); //clear array for use
				//for(int i =0; i < MAXPAYLOAD; i++)
				//	payloadData[i] = 0;
				//printf("payload: %u\r\n ",payload);
				for(int i =0; i < payload; i++){
     458:	e0 17       	cp	r30, r16
     45a:	f1 07       	cpc	r31, r17
     45c:	91 f7       	brne	.-28     	; 0x442 <NeuroSkyTask+0x90>
     45e:	01 c0       	rjmp	.+2      	; 0x462 <NeuroSkyTask+0xb0>
     460:	71 2c       	mov	r7, r1
					input = getchar(); //read next [payload] bytes and save them		
					payloadData[i] = input;
					genchecksum += input;					
				}
				checksum = getchar();
     462:	88 81       	ld	r24, Y
     464:	99 81       	ldd	r25, Y+1	; 0x01
     466:	0e 94 7a 07 	call	0xef4	; 0xef4 <fgetc>
				genchecksum = 255 - genchecksum; //take 1's compliment value
     46a:	97 2d       	mov	r25, r7
     46c:	90 95       	com	r25
				if(checksum != genchecksum){
     46e:	98 13       	cpse	r25, r24
     470:	c4 cf       	rjmp	.-120    	; 0x3fa <NeuroSkyTask+0x48>
					//checksum error. ignore packet :(
					//printf("\r\n ERROR: gen: %u, check: %u\r\n",genchecksum,checksum);
					continue;
				}
				//printf("Success!\r\n");
				poorQuality = 200;
     472:	88 ec       	ldi	r24, 0xC8	; 200
     474:	90 e0       	ldi	r25, 0x00	; 0
     476:	90 93 da 05 	sts	0x05DA, r25
     47a:	80 93 d9 05 	sts	0x05D9, r24
				attention = 0;
     47e:	10 92 6e 06 	sts	0x066E, r1
     482:	10 92 6d 06 	sts	0x066D, r1
				meditation = 0;
     486:	10 92 56 05 	sts	0x0556, r1
     48a:	10 92 55 05 	sts	0x0555, r1
				for(int i =0; i < payload; i++){				
     48e:	1c 14       	cp	r1, r12
     490:	1d 04       	cpc	r1, r13
     492:	0c f0       	brlt	.+2      	; 0x496 <NeuroSkyTask+0xe4>
     494:	b2 cf       	rjmp	.-156    	; 0x3fa <NeuroSkyTask+0x48>
     496:	00 e0       	ldi	r16, 0x00	; 0
     498:	10 e0       	ldi	r17, 0x00	; 0
					//printf("%u ",input);
					//continue;
					switch((int)payloadData[i]){
     49a:	f8 01       	movw	r30, r16
     49c:	ee 0f       	add	r30, r30
     49e:	ff 1f       	adc	r31, r31
     4a0:	ef 57       	subi	r30, 0x7F	; 127
     4a2:	fc 4f       	sbci	r31, 0xFC	; 252
     4a4:	80 81       	ld	r24, Z
     4a6:	91 81       	ldd	r25, Z+1	; 0x01
     4a8:	85 30       	cpi	r24, 0x05	; 5
     4aa:	91 05       	cpc	r25, r1
     4ac:	51 f1       	breq	.+84     	; 0x502 <NeuroSkyTask+0x150>
     4ae:	34 f4       	brge	.+12     	; 0x4bc <NeuroSkyTask+0x10a>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	91 05       	cpc	r25, r1
     4b4:	51 f0       	breq	.+20     	; 0x4ca <NeuroSkyTask+0x118>
     4b6:	04 97       	sbiw	r24, 0x04	; 4
     4b8:	b1 f0       	breq	.+44     	; 0x4e6 <NeuroSkyTask+0x134>
     4ba:	52 c0       	rjmp	.+164    	; 0x560 <NeuroSkyTask+0x1ae>
     4bc:	80 38       	cpi	r24, 0x80	; 128
     4be:	91 05       	cpc	r25, r1
     4c0:	c1 f1       	breq	.+112    	; 0x532 <NeuroSkyTask+0x180>
     4c2:	83 38       	cpi	r24, 0x83	; 131
     4c4:	91 05       	cpc	r25, r1
     4c6:	c1 f1       	breq	.+112    	; 0x538 <NeuroSkyTask+0x186>
     4c8:	4b c0       	rjmp	.+150    	; 0x560 <NeuroSkyTask+0x1ae>
						case 2:
							i++;
     4ca:	0f 5f       	subi	r16, 0xFF	; 255
     4cc:	1f 4f       	sbci	r17, 0xFF	; 255
							poorQuality = payloadData[i];
     4ce:	f8 01       	movw	r30, r16
     4d0:	ee 0f       	add	r30, r30
     4d2:	ff 1f       	adc	r31, r31
     4d4:	ef 57       	subi	r30, 0x7F	; 127
     4d6:	fc 4f       	sbci	r31, 0xFC	; 252
     4d8:	80 81       	ld	r24, Z
     4da:	91 81       	ldd	r25, Z+1	; 0x01
     4dc:	90 93 da 05 	sts	0x05DA, r25
     4e0:	80 93 d9 05 	sts	0x05D9, r24
							break;
     4e4:	3d c0       	rjmp	.+122    	; 0x560 <NeuroSkyTask+0x1ae>
						case 4:
							i++;
     4e6:	0f 5f       	subi	r16, 0xFF	; 255
     4e8:	1f 4f       	sbci	r17, 0xFF	; 255
							attention = payloadData[i];
     4ea:	f8 01       	movw	r30, r16
     4ec:	ee 0f       	add	r30, r30
     4ee:	ff 1f       	adc	r31, r31
     4f0:	ef 57       	subi	r30, 0x7F	; 127
     4f2:	fc 4f       	sbci	r31, 0xFC	; 252
     4f4:	80 81       	ld	r24, Z
     4f6:	91 81       	ldd	r25, Z+1	; 0x01
     4f8:	90 93 6e 06 	sts	0x066E, r25
     4fc:	80 93 6d 06 	sts	0x066D, r24
							break;
     500:	2f c0       	rjmp	.+94     	; 0x560 <NeuroSkyTask+0x1ae>
						case 5:
							i++;
     502:	0f 5f       	subi	r16, 0xFF	; 255
     504:	1f 4f       	sbci	r17, 0xFF	; 255
							meditation = payloadData[i];
     506:	f8 01       	movw	r30, r16
     508:	ee 0f       	add	r30, r30
     50a:	ff 1f       	adc	r31, r31
     50c:	ef 57       	subi	r30, 0x7F	; 127
     50e:	fc 4f       	sbci	r31, 0xFC	; 252
     510:	80 81       	ld	r24, Z
     512:	91 81       	ldd	r25, Z+1	; 0x01
     514:	80 93 55 05 	sts	0x0555, r24
     518:	90 93 56 05 	sts	0x0556, r25
							
							printf("\r\nMeditation: %u\r\n",meditation);
     51c:	9f 93       	push	r25
     51e:	8f 93       	push	r24
     520:	5f 92       	push	r5
     522:	4f 92       	push	r4
     524:	0e 94 b8 07 	call	0xf70	; 0xf70 <printf>
							//print_u(RXStream);
							//UDR0 = 'c';
							//return;
							break;
     528:	0f 90       	pop	r0
     52a:	0f 90       	pop	r0
     52c:	0f 90       	pop	r0
     52e:	0f 90       	pop	r0
     530:	17 c0       	rjmp	.+46     	; 0x560 <NeuroSkyTask+0x1ae>
						case 0x80:
							i +=3; //????
     532:	0d 5f       	subi	r16, 0xFD	; 253
     534:	1f 4f       	sbci	r17, 0xFF	; 255
							break;
     536:	14 c0       	rjmp	.+40     	; 0x560 <NeuroSkyTask+0x1ae>
     538:	f8 01       	movw	r30, r16
     53a:	ee 0f       	add	r30, r30
     53c:	ff 1f       	adc	r31, r31
     53e:	e7 57       	subi	r30, 0x77	; 119
     540:	fc 4f       	sbci	r31, 0xFC	; 252
     542:	d1 01       	movw	r26, r2
						case 0x83:
							i++;
							i++;
							for (int j = 0; j < EEG_SIZE; j++) {
							
								_eeg[j] = ((int)payloadData[++i] << 16) | ((int)payloadData[++i] << 8) | (int)payloadData[++i];
     544:	f0 80       	ld	r15, Z
     546:	e1 2c       	mov	r14, r1
     548:	82 81       	ldd	r24, Z+2	; 0x02
     54a:	93 81       	ldd	r25, Z+3	; 0x03
     54c:	8e 29       	or	r24, r14
     54e:	9f 29       	or	r25, r15
     550:	8d 93       	st	X+, r24
     552:	9d 93       	st	X+, r25
     554:	36 96       	adiw	r30, 0x06	; 6
							i +=3; //????
							break;
						case 0x83:
							i++;
							i++;
							for (int j = 0; j < EEG_SIZE; j++) {
     556:	aa 15       	cp	r26, r10
     558:	bb 05       	cpc	r27, r11
     55a:	a1 f7       	brne	.-24     	; 0x544 <NeuroSkyTask+0x192>
     55c:	06 5e       	subi	r16, 0xE6	; 230
     55e:	1f 4f       	sbci	r17, 0xFF	; 255
				}
				//printf("Success!\r\n");
				poorQuality = 200;
				attention = 0;
				meditation = 0;
				for(int i =0; i < payload; i++){				
     560:	0f 5f       	subi	r16, 0xFF	; 255
     562:	1f 4f       	sbci	r17, 0xFF	; 255
     564:	0c 15       	cp	r16, r12
     566:	1d 05       	cpc	r17, r13
     568:	0c f4       	brge	.+2      	; 0x56c <NeuroSkyTask+0x1ba>
     56a:	97 cf       	rjmp	.-210    	; 0x49a <NeuroSkyTask+0xe8>
     56c:	46 cf       	rjmp	.-372    	; 0x3fa <NeuroSkyTask+0x48>

0000056e <main>:
 */
int main (void)
{

	//getchar();
	InitPeripherals();
     56e:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <InitPeripherals>

    OSInit();                                              /* Initialize uC/OS-II                      */
     572:	0e 94 1b 06 	call	0xc36	; 0xc36 <OSInit>

/* Create OS_EVENT resources here  */
	LedMBox = OSMboxCreate(NULL);
     576:	80 e0       	ldi	r24, 0x00	; 0
     578:	90 e0       	ldi	r25, 0x00	; 0
     57a:	0e 94 4f 05 	call	0xa9e	; 0xa9e <OSMboxCreate>
     57e:	90 93 6e 03 	sts	0x036E, r25
     582:	80 93 6d 03 	sts	0x036D, r24
	SerialTxMBox = OSMboxCreate(NULL);
     586:	80 e0       	ldi	r24, 0x00	; 0
     588:	90 e0       	ldi	r25, 0x00	; 0
     58a:	0e 94 4f 05 	call	0xa9e	; 0xa9e <OSMboxCreate>
     58e:	90 93 d4 04 	sts	0x04D4, r25
     592:	80 93 d3 04 	sts	0x04D3, r24
	SerialTxSem = OSSemCreate(1);
     596:	81 e0       	ldi	r24, 0x01	; 1
     598:	90 e0       	ldi	r25, 0x00	; 0
     59a:	0e 94 6c 05 	call	0xad8	; 0xad8 <OSSemCreate>
     59e:	90 93 58 05 	sts	0x0558, r25
     5a2:	80 93 57 05 	sts	0x0557, r24
	DDRB = 0xFF; //port 5 is led bit
     5a6:	8f ef       	ldi	r24, 0xFF	; 255
     5a8:	84 b9       	out	0x04, r24	; 4
/* END Create OS_EVENT resources   */

    OSTaskCreate(TaskStart, (void *)0, &TaskStartStk[TASK_STK_SIZE - 1], 5);
     5aa:	25 e0       	ldi	r18, 0x05	; 5
     5ac:	4e ea       	ldi	r20, 0xAE	; 174
     5ae:	56 e0       	ldi	r21, 0x06	; 6
     5b0:	60 e0       	ldi	r22, 0x00	; 0
     5b2:	70 e0       	ldi	r23, 0x00	; 0
     5b4:	81 ec       	ldi	r24, 0xC1	; 193
     5b6:	91 e0       	ldi	r25, 0x01	; 1
     5b8:	0e 94 b1 05 	call	0xb62	; 0xb62 <OSTaskCreate>

    OSStart();                                             /* Start multitasking                       */
     5bc:	0e 94 7e 04 	call	0x8fc	; 0x8fc <OSStart>
     5c0:	ff cf       	rjmp	.-2      	; 0x5c0 <main+0x52>

000005c2 <PostTxCompleteSem>:
 *                        Routine to Post the Transmit buffer empty semaphone
 *********************************************************************************************************
 */
void PostTxCompleteSem (void)
{
	OSSemPost(SerialTxSem);
     5c2:	80 91 57 05 	lds	r24, 0x0557
     5c6:	90 91 58 05 	lds	r25, 0x0558
     5ca:	0e 94 89 05 	call	0xb12	; 0xb12 <OSSemPost>
     5ce:	08 95       	ret

000005d0 <InitPeripherals>:

void InitPeripherals(void)
{

	// manage WDT
	cli();	
     5d0:	f8 94       	cli
	WatchDogReset();
     5d2:	0e 94 70 01 	call	0x2e0	; 0x2e0 <WatchDogReset>
	MCUSR &= ~(1<<WDRF);			// clear WDRF in MCUSR
     5d6:	84 b7       	in	r24, 0x34	; 52
     5d8:	87 7f       	andi	r24, 0xF7	; 247
     5da:	84 bf       	out	0x34, r24	; 52
	WDTCSR |= (1<<WDCE)|(1<<WDE)|0x08;	// write a logic one to WDCE and WDE and keep old prescalar setting to prevent unintentional timeout
     5dc:	e0 e6       	ldi	r30, 0x60	; 96
     5de:	f0 e0       	ldi	r31, 0x00	; 0
     5e0:	80 81       	ld	r24, Z
     5e2:	88 61       	ori	r24, 0x18	; 24
     5e4:	80 83       	st	Z, r24
	WDTCSR=0x00;					// turn wdt off
     5e6:	10 82       	st	Z, r1

	
	// PortB: set 
	//
	PORTB &= ~_BV(PORTB5); // set pin 5 (Arduino DIO pin 13) low to turn led off
     5e8:	2d 98       	cbi	0x05, 5	; 5
	PORTB &= ~_BV(PORTB4); // set pin 4 low to turn led off
     5ea:	2c 98       	cbi	0x05, 4	; 5
	DDRB |= _BV(DDB5); // set pin 5 of PORTB for output
     5ec:	25 9a       	sbi	0x04, 5	; 4
	DDRB |= _BV(DDB4); // set pin 4 of PORTB for output
     5ee:	24 9a       	sbi	0x04, 4	; 4

	// setup Timer0 for UC/OS-II timer tick
	//
	TCCR0A = _BV(WGM01) | _BV(WGM00);				/* set timer0: OC0A/OC0B disconnected; fast PCM mode           */
     5f0:	83 e0       	ldi	r24, 0x03	; 3
     5f2:	84 bd       	out	0x24, r24	; 36
	TCCR0B = _BV(WGM02) | _BV(CS02)| _BV(CS00);		/* timer0 clock = system clock/1024      */
     5f4:	8d e0       	ldi	r24, 0x0D	; 13
     5f6:	85 bd       	out	0x25, r24	; 37
	OCR0A = (CPU_CLOCK_HZ/OS_TICKS_PER_SEC/1024)-1; /* This combination yields an interrupt every 5 msec  */
     5f8:	86 e2       	ldi	r24, 0x26	; 38
     5fa:	87 bd       	out	0x27, r24	; 39
	TIMSK0 |= _BV(TOIE0);							/* enable timer0 CTC-A interrupt */
     5fc:	ee e6       	ldi	r30, 0x6E	; 110
     5fe:	f0 e0       	ldi	r31, 0x00	; 0
     600:	80 81       	ld	r24, Z
     602:	81 60       	ori	r24, 0x01	; 1
     604:	80 83       	st	Z, r24
	PRR &= ~_BV(PRTIM0);							/* turn on the module in the power management section */
     606:	e4 e6       	ldi	r30, 0x64	; 100
     608:	f0 e0       	ldi	r31, 0x00	; 0
     60a:	80 81       	ld	r24, Z
     60c:	8f 7d       	andi	r24, 0xDF	; 223
     60e:	80 83       	st	Z, r24


/* setup USART here  */	
	UCSR0B = (1 << RXEN0) | (1 << TXEN0);   /* Enable RX and TX */
     610:	e1 ec       	ldi	r30, 0xC1	; 193
     612:	f0 e0       	ldi	r31, 0x00	; 0
     614:	88 e1       	ldi	r24, 0x18	; 24
     616:	80 83       	st	Z, r24
	/*      1 stop bit      8 data bits     no parity bit */
	UCSR0C = (0 << USBS0) | (3 << UCSZ00);
     618:	86 e0       	ldi	r24, 0x06	; 6
     61a:	80 93 c2 00 	sts	0x00C2, r24
	//UCSR0C |= (1 << UPM01); //enable parit bit odd?
	#if USE_2X
	UCSR0A |= _BV(U2X0); //enable use2x
	#else
	UCSR0A &= ~(_BV(U2X0)); //disable use2x
     61e:	a0 ec       	ldi	r26, 0xC0	; 192
     620:	b0 e0       	ldi	r27, 0x00	; 0
     622:	8c 91       	ld	r24, X
     624:	8d 7f       	andi	r24, 0xFD	; 253
     626:	8c 93       	st	X, r24
	#endif
	//set BAUD rate
	UBRR0L = UBRR & 0xFF;
     628:	80 e1       	ldi	r24, 0x10	; 16
     62a:	80 93 c4 00 	sts	0x00C4, r24
	UBRR0H = (UBRR >> 8);
     62e:	10 92 c5 00 	sts	0x00C5, r1
	UCSR0B |= (1<< TXCIE0); //enable TX complete interrupt
     632:	80 81       	ld	r24, Z
     634:	80 64       	ori	r24, 0x40	; 64
     636:	80 83       	st	Z, r24
/* END setup USART   */	
	

	// Enable Global Interrupts
	//
	sei();							/* enable interrupts                */
     638:	78 94       	sei
     63a:	08 95       	ret

0000063c <OSTaskStkInit>:
    stk     = (INT8U *)ptos;		    /* AVR return stack ("hardware stack")          		*/
    tmp     = (INT16U)task;

    /* "push" initial register values onto the stack */

    *stk-- = (INT8U)tmp;                   /* Put task start address on top of stack          	        */
     63c:	fa 01       	movw	r30, r20
     63e:	80 83       	st	Z, r24
    *stk-- = (INT8U)(tmp >> 8);
     640:	31 97       	sbiw	r30, 0x01	; 1
     642:	90 83       	st	Z, r25

    *stk-- = (INT8U)0x00;                   /* R0  = 0x00                                               */
     644:	31 97       	sbiw	r30, 0x01	; 1
     646:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R1  = 0x00                                               */
     648:	31 97       	sbiw	r30, 0x01	; 1
     64a:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R2  = 0x00                                               */
     64c:	31 97       	sbiw	r30, 0x01	; 1
     64e:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R3  = 0x00                                               */
     650:	31 97       	sbiw	r30, 0x01	; 1
     652:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R4  = 0x00                                               */
     654:	31 97       	sbiw	r30, 0x01	; 1
     656:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R5  = 0x00                                               */
     658:	31 97       	sbiw	r30, 0x01	; 1
     65a:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R6  = 0x00                                               */
     65c:	31 97       	sbiw	r30, 0x01	; 1
     65e:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R7  = 0x00                                               */
     660:	31 97       	sbiw	r30, 0x01	; 1
     662:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R8  = 0x00                                               */
     664:	31 97       	sbiw	r30, 0x01	; 1
     666:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R9  = 0x00                                               */
     668:	31 97       	sbiw	r30, 0x01	; 1
     66a:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R10 = 0x00                                               */
     66c:	31 97       	sbiw	r30, 0x01	; 1
     66e:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R11 = 0x00                                               */
     670:	31 97       	sbiw	r30, 0x01	; 1
     672:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R12 = 0x00                                               */
     674:	31 97       	sbiw	r30, 0x01	; 1
     676:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R13 = 0x00                                               */
     678:	31 97       	sbiw	r30, 0x01	; 1
     67a:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R14 = 0x00                                               */
     67c:	31 97       	sbiw	r30, 0x01	; 1
     67e:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R15 = 0x00                                               */
     680:	31 97       	sbiw	r30, 0x01	; 1
     682:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R16 = 0x00                                               */
     684:	31 97       	sbiw	r30, 0x01	; 1
     686:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R17 = 0x00                                               */
     688:	31 97       	sbiw	r30, 0x01	; 1
     68a:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R18 = 0x00                                               */
     68c:	31 97       	sbiw	r30, 0x01	; 1
     68e:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R19 = 0x00                                               */
     690:	31 97       	sbiw	r30, 0x01	; 1
     692:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R20 = 0x00                                               */
     694:	31 97       	sbiw	r30, 0x01	; 1
     696:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R21 = 0x00                                               */
     698:	31 97       	sbiw	r30, 0x01	; 1
     69a:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R22 = 0x00                                               */
     69c:	31 97       	sbiw	r30, 0x01	; 1
     69e:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R23 = 0x00                                               */
     6a0:	31 97       	sbiw	r30, 0x01	; 1
     6a2:	10 82       	st	Z, r1
 	
    tmp    = (INT16U)pdata;
    *stk-- = (INT8U)tmp;                    /* Simulate call to function with argument                  */
     6a4:	31 97       	sbiw	r30, 0x01	; 1
     6a6:	60 83       	st	Z, r22
    *stk-- = (INT8U)(tmp >> 8);		    /* R24, R25 contains argument pointer pdata 		*/
     6a8:	31 97       	sbiw	r30, 0x01	; 1
     6aa:	70 83       	st	Z, r23

    *stk-- = (INT8U)0x00;                   /* R26 = 0x00                                               */
     6ac:	31 97       	sbiw	r30, 0x01	; 1
     6ae:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R27 = 0x00                                               */
     6b0:	31 97       	sbiw	r30, 0x01	; 1
     6b2:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R28 = 0x00                                               */
     6b4:	31 97       	sbiw	r30, 0x01	; 1
     6b6:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R29 = 0x00                                               */
     6b8:	31 97       	sbiw	r30, 0x01	; 1
     6ba:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R30 = 0x00                                               */
     6bc:	31 97       	sbiw	r30, 0x01	; 1
     6be:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R31 = 0x00                                               */
     6c0:	31 97       	sbiw	r30, 0x01	; 1
     6c2:	10 82       	st	Z, r1
#ifdef RAMPZ
    *stk-- = (INT8U)0x00;                   /* RAMPZ = 0x00                                             */
#endif
    *stk-- = (INT8U)0x80;                   /* SREG = Interrupts enabled                                */
     6c4:	31 97       	sbiw	r30, 0x01	; 1
     6c6:	80 e8       	ldi	r24, 0x80	; 128
     6c8:	80 83       	st	Z, r24
    return ((OS_STK *)stk);
}
     6ca:	ca 01       	movw	r24, r20
     6cc:	83 97       	sbiw	r24, 0x23	; 35
     6ce:	08 95       	ret

000006d0 <OSTaskCreateHook>:
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
#if OS_CPU_HOOKS_EN > 0
void OSTaskCreateHook (OS_TCB *ptcb)
{
     6d0:	08 95       	ret

000006d2 <OSTaskStatHook>:
*
* Arguments  : none
*********************************************************************************************************
*/
void OSTaskStatHook (void)
{
     6d2:	08 95       	ret

000006d4 <OSTimeTickHook>:
*********************************************************************************************************
*/
#if (OS_CPU_HOOKS_EN > 0) 
//#if (OS_CPU_HOOKS_EN > 0) && (OS_TIME_TICK_HOOK_EN > 0)
void OSTimeTickHook (void)
{
     6d4:	08 95       	ret

000006d6 <uart_init>:
#include <util/setbaud.h>

/* http://www.cs.mun.ca/~rod/Winter2007/4723/notes/serial/serial.html */

void uart_init(void) {
    UBRR0H = UBRRH_VALUE;
     6d6:	10 92 c5 00 	sts	0x00C5, r1
    UBRR0L = UBRRL_VALUE;
     6da:	82 e2       	ldi	r24, 0x22	; 34
     6dc:	80 93 c4 00 	sts	0x00C4, r24
    
#if USE_2X
    UCSR0A |= _BV(U2X0);
     6e0:	e0 ec       	ldi	r30, 0xC0	; 192
     6e2:	f0 e0       	ldi	r31, 0x00	; 0
     6e4:	80 81       	ld	r24, Z
     6e6:	82 60       	ori	r24, 0x02	; 2
     6e8:	80 83       	st	Z, r24
#else
    UCSR0A &= ~(_BV(U2X0));
#endif

    UCSR0C = _BV(UCSZ01) | _BV(UCSZ00); /* 8-bit data */ 
     6ea:	86 e0       	ldi	r24, 0x06	; 6
     6ec:	80 93 c2 00 	sts	0x00C2, r24
    UCSR0B = (1 << RXEN0) | (1 << TXEN0);  /* Enable RX and TX */    
     6f0:	88 e1       	ldi	r24, 0x18	; 24
     6f2:	80 93 c1 00 	sts	0x00C1, r24
     6f6:	08 95       	ret

000006f8 <uart_putchar>:
}

void uart_putchar(char c, FILE *stream) {
     6f8:	cf 93       	push	r28
     6fa:	c8 2f       	mov	r28, r24
    if (c == '\n') {
     6fc:	8a 30       	cpi	r24, 0x0A	; 10
     6fe:	19 f4       	brne	.+6      	; 0x706 <uart_putchar+0xe>
        uart_putchar('\r', stream);
     700:	8d e0       	ldi	r24, 0x0D	; 13
     702:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <uart_putchar>
    }
    loop_until_bit_is_set(UCSR0A, UDRE0);
     706:	e0 ec       	ldi	r30, 0xC0	; 192
     708:	f0 e0       	ldi	r31, 0x00	; 0
     70a:	90 81       	ld	r25, Z
     70c:	95 ff       	sbrs	r25, 5
     70e:	fd cf       	rjmp	.-6      	; 0x70a <uart_putchar+0x12>
    UDR0 = c;
     710:	c0 93 c6 00 	sts	0x00C6, r28
}
     714:	cf 91       	pop	r28
     716:	08 95       	ret

00000718 <uart_getchar>:

char uart_getchar(FILE *stream) {
    loop_until_bit_is_set(UCSR0A, RXC0);
     718:	e0 ec       	ldi	r30, 0xC0	; 192
     71a:	f0 e0       	ldi	r31, 0x00	; 0
     71c:	80 81       	ld	r24, Z
     71e:	88 23       	and	r24, r24
     720:	ec f7       	brge	.-6      	; 0x71c <uart_getchar+0x4>
    return UDR0;
     722:	80 91 c6 00 	lds	r24, 0x00C6
}
     726:	08 95       	ret

00000728 <OSTaskIdle>:

void OSTaskIdle (void *pdata)
{
    pdata = pdata;                               /* Prevent compiler warning for not using 'pdata'     */
    for (;;) {
        OS_ENTER_CRITICAL();
     728:	f8 94       	cli
        OSIdleCtr++;
        OS_EXIT_CRITICAL();
     72a:	78 94       	sei
     72c:	fd cf       	rjmp	.-6      	; 0x728 <OSTaskIdle>

0000072e <OSEventTaskRdy>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if  (OS_Q_EN && (OS_MAX_QS >= 2)) || OS_MBOX_EN || OS_SEM_EN
void  OSEventTaskRdy (OS_EVENT *pevent, void *msg, INT8U msk)
{
     72e:	0f 93       	push	r16
     730:	1f 93       	push	r17
     732:	cf 93       	push	r28
     734:	df 93       	push	r29
    INT8U   bitx;
    INT8U   bity;
    INT8U   prio;


    y    = OSUnMapTbl[pevent->OSEventGrp];            /* Find highest prio. task waiting for message   */
     736:	fc 01       	movw	r30, r24
     738:	05 85       	ldd	r16, Z+13	; 0x0d
     73a:	e0 2f       	mov	r30, r16
     73c:	f0 e0       	ldi	r31, 0x00	; 0
     73e:	e1 5d       	subi	r30, 0xD1	; 209
     740:	fe 4f       	sbci	r31, 0xFE	; 254
     742:	10 81       	ld	r17, Z
    bity = OSMapTbl[y];
     744:	21 2f       	mov	r18, r17
     746:	30 e0       	ldi	r19, 0x00	; 0
     748:	d9 01       	movw	r26, r18
     74a:	a1 5d       	subi	r26, 0xD1	; 209
     74c:	bd 4f       	sbci	r27, 0xFD	; 253
     74e:	dc 91       	ld	r29, X
    x    = OSUnMapTbl[pevent->OSEventTbl[y]];
     750:	fc 01       	movw	r30, r24
     752:	e2 0f       	add	r30, r18
     754:	f3 1f       	adc	r31, r19
     756:	52 81       	ldd	r21, Z+2	; 0x02
     758:	a5 2f       	mov	r26, r21
     75a:	b0 e0       	ldi	r27, 0x00	; 0
     75c:	a1 5d       	subi	r26, 0xD1	; 209
     75e:	be 4f       	sbci	r27, 0xFE	; 254
     760:	cc 91       	ld	r28, X
    bitx = OSMapTbl[x];
     762:	ac 2f       	mov	r26, r28
     764:	b0 e0       	ldi	r27, 0x00	; 0
     766:	a1 5d       	subi	r26, 0xD1	; 209
     768:	bd 4f       	sbci	r27, 0xFD	; 253
     76a:	ac 91       	ld	r26, X
    prio = (INT8U)((y << 3) + x);                     /* Find priority of task getting the msg         */
     76c:	11 0f       	add	r17, r17
     76e:	11 0f       	add	r17, r17
     770:	11 0f       	add	r17, r17
     772:	c1 0f       	add	r28, r17
    if ((pevent->OSEventTbl[y] &= ~bitx) == 0) {      /* Remove this task from the waiting list        */
     774:	ba 2f       	mov	r27, r26
     776:	b0 95       	com	r27
     778:	5b 23       	and	r21, r27
     77a:	52 83       	std	Z+2, r21	; 0x02
     77c:	51 11       	cpse	r21, r1
     77e:	05 c0       	rjmp	.+10     	; 0x78a <OSEventTaskRdy+0x5c>
        pevent->OSEventGrp &= ~bity;
     780:	5d 2f       	mov	r21, r29
     782:	50 95       	com	r21
     784:	05 23       	and	r16, r21
     786:	fc 01       	movw	r30, r24
     788:	05 87       	std	Z+13, r16	; 0x0d
    }
    ptcb                 =  OSTCBPrioTbl[prio];       /* Point to this task's OS_TCB                   */
     78a:	ec 2f       	mov	r30, r28
     78c:	f0 e0       	ldi	r31, 0x00	; 0
     78e:	ee 0f       	add	r30, r30
     790:	ff 1f       	adc	r31, r31
     792:	e0 5e       	subi	r30, 0xE0	; 224
     794:	f8 4f       	sbci	r31, 0xF8	; 248
     796:	01 90       	ld	r0, Z+
     798:	f0 81       	ld	r31, Z
     79a:	e0 2d       	mov	r30, r0
    ptcb->OSTCBDly       =  0;                        /* Prevent OSTimeTick() from readying task       */
     79c:	13 86       	std	Z+11, r1	; 0x0b
     79e:	12 86       	std	Z+10, r1	; 0x0a
    ptcb->OSTCBEventPtr  = (OS_EVENT *)0;             /* Unlink ECB from this task                     */
     7a0:	17 82       	std	Z+7, r1	; 0x07
     7a2:	16 82       	std	Z+6, r1	; 0x06
#if (OS_Q_EN && (OS_MAX_QS >= 2)) || OS_MBOX_EN
    ptcb->OSTCBMsg       = msg;                       /* Send message directly to waiting task         */
     7a4:	71 87       	std	Z+9, r23	; 0x09
     7a6:	60 87       	std	Z+8, r22	; 0x08
#else
    msg                  = msg;                       /* Prevent compiler warning if not used          */    
#endif    
    ptcb->OSTCBStat     &= ~msk;                      /* Clear bit associated with event type          */
     7a8:	40 95       	com	r20
     7aa:	84 85       	ldd	r24, Z+12	; 0x0c
     7ac:	48 23       	and	r20, r24
     7ae:	44 87       	std	Z+12, r20	; 0x0c
    if (ptcb->OSTCBStat == OS_STAT_RDY) {             /* See if task is ready (could be susp'd)        */
     7b0:	41 11       	cpse	r20, r1
     7b2:	0b c0       	rjmp	.+22     	; 0x7ca <OSEventTaskRdy+0x9c>
        OSRdyGrp        |=  bity;                     /* Put task in the ready to run list             */
     7b4:	80 91 c7 06 	lds	r24, 0x06C7
     7b8:	d8 2b       	or	r29, r24
     7ba:	d0 93 c7 06 	sts	0x06C7, r29
        OSRdyTbl[y]     |=  bitx;
     7be:	f9 01       	movw	r30, r18
     7c0:	e8 53       	subi	r30, 0x38	; 56
     7c2:	f9 4f       	sbci	r31, 0xF9	; 249
     7c4:	80 81       	ld	r24, Z
     7c6:	a8 2b       	or	r26, r24
     7c8:	a0 83       	st	Z, r26
    }
}
     7ca:	df 91       	pop	r29
     7cc:	cf 91       	pop	r28
     7ce:	1f 91       	pop	r17
     7d0:	0f 91       	pop	r16
     7d2:	08 95       	ret

000007d4 <OSEventWaitListInit>:
#if  (OS_Q_EN && (OS_MAX_QS >= 2)) || OS_MBOX_EN || OS_SEM_EN
void  OSEventWaitListInit (OS_EVENT *pevent)
{
    INT8U i;
    
    pevent->OSEventGrp = 0x00;                   /* No task waiting on event                           */
     7d4:	fc 01       	movw	r30, r24
     7d6:	15 86       	std	Z+13, r1	; 0x0d
     7d8:	32 96       	adiw	r30, 0x02	; 2
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
     7da:	80 e0       	ldi	r24, 0x00	; 0
        pevent->OSEventTbl[i] = 0x00;
     7dc:	11 92       	st	Z+, r1
void  OSEventWaitListInit (OS_EVENT *pevent)
{
    INT8U i;
    
    pevent->OSEventGrp = 0x00;                   /* No task waiting on event                           */
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
     7de:	8f 5f       	subi	r24, 0xFF	; 255
     7e0:	88 30       	cpi	r24, 0x08	; 8
     7e2:	e1 f7       	brne	.-8      	; 0x7dc <OSEventWaitListInit+0x8>
        pevent->OSEventTbl[i] = 0x00;
    }
}
     7e4:	08 95       	ret

000007e6 <OSIntExit>:
*********************************************************************************************************
*/

void OSIntExit (void)
{
    OS_ENTER_CRITICAL();
     7e6:	f8 94       	cli
    if ((--OSIntNesting | OSLockNesting) == 0) { /* Reschedule only if all ISRs completed & not locked */
     7e8:	80 91 d2 06 	lds	r24, 0x06D2
     7ec:	81 50       	subi	r24, 0x01	; 1
     7ee:	80 93 d2 06 	sts	0x06D2, r24
     7f2:	90 91 af 06 	lds	r25, 0x06AF
     7f6:	89 2b       	or	r24, r25
     7f8:	e1 f5       	brne	.+120    	; 0x872 <OSIntExit+0x8c>
        OSIntExitY    = OSUnMapTbl[OSRdyGrp];
     7fa:	e0 91 c7 06 	lds	r30, 0x06C7
     7fe:	f0 e0       	ldi	r31, 0x00	; 0
     800:	e1 5d       	subi	r30, 0xD1	; 209
     802:	fe 4f       	sbci	r31, 0xFE	; 254
     804:	80 81       	ld	r24, Z
     806:	80 93 6c 03 	sts	0x036C, r24
        OSPrioHighRdy = (INT8U)((OSIntExitY << 3) + OSUnMapTbl[OSRdyTbl[OSIntExitY]]);
     80a:	e8 2f       	mov	r30, r24
     80c:	f0 e0       	ldi	r31, 0x00	; 0
     80e:	e8 53       	subi	r30, 0x38	; 56
     810:	f9 4f       	sbci	r31, 0xF9	; 249
     812:	e0 81       	ld	r30, Z
     814:	f0 e0       	ldi	r31, 0x00	; 0
     816:	e1 5d       	subi	r30, 0xD1	; 209
     818:	fe 4f       	sbci	r31, 0xFE	; 254
     81a:	88 0f       	add	r24, r24
     81c:	88 0f       	add	r24, r24
     81e:	88 0f       	add	r24, r24
     820:	90 81       	ld	r25, Z
     822:	89 0f       	add	r24, r25
     824:	80 93 b5 06 	sts	0x06B5, r24
        if (OSPrioHighRdy != OSPrioCur) {        /* No context switch if current task is highest ready */
     828:	90 91 b6 06 	lds	r25, 0x06B6
     82c:	89 17       	cp	r24, r25
     82e:	09 f1       	breq	.+66     	; 0x872 <OSIntExit+0x8c>
            OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy];
     830:	e8 2f       	mov	r30, r24
     832:	f0 e0       	ldi	r31, 0x00	; 0
     834:	ee 0f       	add	r30, r30
     836:	ff 1f       	adc	r31, r31
     838:	e0 5e       	subi	r30, 0xE0	; 224
     83a:	f8 4f       	sbci	r31, 0xF8	; 248
     83c:	80 81       	ld	r24, Z
     83e:	91 81       	ldd	r25, Z+1	; 0x01
     840:	90 93 c6 06 	sts	0x06C6, r25
     844:	80 93 c5 06 	sts	0x06C5, r24
            OSCtxSwCtr++;                        /* Keep track of the number of context switches       */
     848:	80 91 b9 06 	lds	r24, 0x06B9
     84c:	90 91 ba 06 	lds	r25, 0x06BA
     850:	a0 91 bb 06 	lds	r26, 0x06BB
     854:	b0 91 bc 06 	lds	r27, 0x06BC
     858:	01 96       	adiw	r24, 0x01	; 1
     85a:	a1 1d       	adc	r26, r1
     85c:	b1 1d       	adc	r27, r1
     85e:	80 93 b9 06 	sts	0x06B9, r24
     862:	90 93 ba 06 	sts	0x06BA, r25
     866:	a0 93 bb 06 	sts	0x06BB, r26
     86a:	b0 93 bc 06 	sts	0x06BC, r27
            OSIntCtxSw();                        /* Perform interrupt level context switch             */
     86e:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <OSIntCtxSw>
        }
    }
    OS_EXIT_CRITICAL();
     872:	78 94       	sei
     874:	08 95       	ret

00000876 <OSSched>:
void OSSched (void)
{
    INT8U y;


    OS_ENTER_CRITICAL();
     876:	f8 94       	cli
    if ((OSLockNesting | OSIntNesting) == 0) {   /* Task scheduling must be enabled and not ISR level  */
     878:	90 91 d2 06 	lds	r25, 0x06D2
     87c:	80 91 af 06 	lds	r24, 0x06AF
     880:	89 2b       	or	r24, r25
     882:	d1 f5       	brne	.+116    	; 0x8f8 <OSSched+0x82>
        y             = OSUnMapTbl[OSRdyGrp];    /* Get pointer to highest priority task ready to run  */
     884:	e0 91 c7 06 	lds	r30, 0x06C7
     888:	f0 e0       	ldi	r31, 0x00	; 0
     88a:	e1 5d       	subi	r30, 0xD1	; 209
     88c:	fe 4f       	sbci	r31, 0xFE	; 254
     88e:	80 81       	ld	r24, Z
        OSPrioHighRdy = (INT8U)((y << 3) + OSUnMapTbl[OSRdyTbl[y]]);
     890:	e8 2f       	mov	r30, r24
     892:	f0 e0       	ldi	r31, 0x00	; 0
     894:	e8 53       	subi	r30, 0x38	; 56
     896:	f9 4f       	sbci	r31, 0xF9	; 249
     898:	e0 81       	ld	r30, Z
     89a:	f0 e0       	ldi	r31, 0x00	; 0
     89c:	e1 5d       	subi	r30, 0xD1	; 209
     89e:	fe 4f       	sbci	r31, 0xFE	; 254
     8a0:	88 0f       	add	r24, r24
     8a2:	88 0f       	add	r24, r24
     8a4:	88 0f       	add	r24, r24
     8a6:	90 81       	ld	r25, Z
     8a8:	e8 2f       	mov	r30, r24
     8aa:	e9 0f       	add	r30, r25
     8ac:	e0 93 b5 06 	sts	0x06B5, r30
        if (OSPrioHighRdy != OSPrioCur) {         /* No context switch if current task is highest ready */
     8b0:	80 91 b6 06 	lds	r24, 0x06B6
     8b4:	e8 17       	cp	r30, r24
     8b6:	01 f1       	breq	.+64     	; 0x8f8 <OSSched+0x82>
            OSTCBHighRdy = OSTCBPrioTbl[OSPrioHighRdy];
     8b8:	f0 e0       	ldi	r31, 0x00	; 0
     8ba:	ee 0f       	add	r30, r30
     8bc:	ff 1f       	adc	r31, r31
     8be:	e0 5e       	subi	r30, 0xE0	; 224
     8c0:	f8 4f       	sbci	r31, 0xF8	; 248
     8c2:	80 81       	ld	r24, Z
     8c4:	91 81       	ldd	r25, Z+1	; 0x01
     8c6:	90 93 c6 06 	sts	0x06C6, r25
     8ca:	80 93 c5 06 	sts	0x06C5, r24
            OSCtxSwCtr++;                        /* Increment context switch counter                   */
     8ce:	80 91 b9 06 	lds	r24, 0x06B9
     8d2:	90 91 ba 06 	lds	r25, 0x06BA
     8d6:	a0 91 bb 06 	lds	r26, 0x06BB
     8da:	b0 91 bc 06 	lds	r27, 0x06BC
     8de:	01 96       	adiw	r24, 0x01	; 1
     8e0:	a1 1d       	adc	r26, r1
     8e2:	b1 1d       	adc	r27, r1
     8e4:	80 93 b9 06 	sts	0x06B9, r24
     8e8:	90 93 ba 06 	sts	0x06BA, r25
     8ec:	a0 93 bb 06 	sts	0x06BB, r26
     8f0:	b0 93 bc 06 	sts	0x06BC, r27
#if 1
			//DebugPulse ();
#endif	
			
#if 1			
            OS_TASK_SW();                        /* Perform a context switch                           */
     8f4:	0e 94 83 00 	call	0x106	; 0x106 <OSCtxSw>
#endif
        }
    }
    OS_EXIT_CRITICAL();
     8f8:	78 94       	sei
     8fa:	08 95       	ret

000008fc <OSStart>:
#if 0
	DebugPulse();
#endif	
	
	
    if (OSRunning == FALSE) {
     8fc:	80 91 b0 06 	lds	r24, 0x06B0
     900:	81 11       	cpse	r24, r1
     902:	26 c0       	rjmp	.+76     	; 0x950 <__stack+0x51>
        y             = OSUnMapTbl[OSRdyGrp];        /* Find highest priority's task priority number   */
     904:	e0 91 c7 06 	lds	r30, 0x06C7
     908:	f0 e0       	ldi	r31, 0x00	; 0
     90a:	e1 5d       	subi	r30, 0xD1	; 209
     90c:	fe 4f       	sbci	r31, 0xFE	; 254
     90e:	e0 81       	ld	r30, Z
        x             = OSUnMapTbl[OSRdyTbl[y]];
     910:	ae 2f       	mov	r26, r30
     912:	b0 e0       	ldi	r27, 0x00	; 0
     914:	a8 53       	subi	r26, 0x38	; 56
     916:	b9 4f       	sbci	r27, 0xF9	; 249
     918:	ac 91       	ld	r26, X
     91a:	b0 e0       	ldi	r27, 0x00	; 0
     91c:	a1 5d       	subi	r26, 0xD1	; 209
     91e:	be 4f       	sbci	r27, 0xFE	; 254
        OSPrioHighRdy = (INT8U)((y << 3) + x);
     920:	ee 0f       	add	r30, r30
     922:	ee 0f       	add	r30, r30
     924:	ee 0f       	add	r30, r30
     926:	8c 91       	ld	r24, X
     928:	e8 0f       	add	r30, r24
     92a:	e0 93 b5 06 	sts	0x06B5, r30
        OSPrioCur     = OSPrioHighRdy;
     92e:	e0 93 b6 06 	sts	0x06B6, r30
        OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy]; /* Point to highest priority task ready to run    */
     932:	f0 e0       	ldi	r31, 0x00	; 0
     934:	ee 0f       	add	r30, r30
     936:	ff 1f       	adc	r31, r31
     938:	e0 5e       	subi	r30, 0xE0	; 224
     93a:	f8 4f       	sbci	r31, 0xF8	; 248
     93c:	80 81       	ld	r24, Z
     93e:	91 81       	ldd	r25, Z+1	; 0x01
     940:	90 93 c6 06 	sts	0x06C6, r25
     944:	80 93 c5 06 	sts	0x06C5, r24
        OSTCBCur      = OSTCBHighRdy;
     948:	90 93 d4 06 	sts	0x06D4, r25
     94c:	80 93 d3 06 	sts	0x06D3, r24
    }
	
	
#if 1
	OSStartHighRdy();                            /* Execute target specific code to start task     */
     950:	0e 94 53 00 	call	0xa6	; 0xa6 <OSStartHighRdy>
     954:	08 95       	ret

00000956 <OSTCBInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

INT8U OSTCBInit (INT8U prio, OS_STK *ptos, OS_STK *pbos, INT16U id, INT16U stk_size, void *pext, INT16U opt)
{
     956:	cf 93       	push	r28
     958:	df 93       	push	r29
    OS_TCB *ptcb;


    OS_ENTER_CRITICAL();
     95a:	f8 94       	cli
    ptcb = OSTCBFreeList;                                  /* Get a free TCB from the free TCB list    */
     95c:	e0 91 c1 06 	lds	r30, 0x06C1
     960:	f0 91 c2 06 	lds	r31, 0x06C2
    if (ptcb != (OS_TCB *)0) {
     964:	30 97       	sbiw	r30, 0x00	; 0
     966:	09 f4       	brne	.+2      	; 0x96a <OSTCBInit+0x14>
     968:	4f c0       	rjmp	.+158    	; 0xa08 <OSTCBInit+0xb2>
        OSTCBFreeList        = ptcb->OSTCBNext;            /* Update pointer to free TCB list          */
     96a:	22 81       	ldd	r18, Z+2	; 0x02
     96c:	33 81       	ldd	r19, Z+3	; 0x03
     96e:	30 93 c2 06 	sts	0x06C2, r19
     972:	20 93 c1 06 	sts	0x06C1, r18
        OS_EXIT_CRITICAL();
     976:	78 94       	sei
        ptcb->OSTCBStkPtr    = ptos;                       /* Load Stack pointer in TCB                */
     978:	71 83       	std	Z+1, r23	; 0x01
     97a:	60 83       	st	Z, r22
        ptcb->OSTCBPrio      = (INT8U)prio;                /* Load task priority into TCB              */
     97c:	85 87       	std	Z+13, r24	; 0x0d
        ptcb->OSTCBStat      = OS_STAT_RDY;                /* Task is ready to run                     */
     97e:	14 86       	std	Z+12, r1	; 0x0c
        ptcb->OSTCBDly       = 0;                          /* Task is not delayed                      */
     980:	13 86       	std	Z+11, r1	; 0x0b
     982:	12 86       	std	Z+10, r1	; 0x0a

#if OS_TASK_DEL_EN        
        ptcb->OSTCBDelReq    = OS_NO_ERR;
#endif

        ptcb->OSTCBY         = prio >> 3;                  /* Pre-compute X, Y, BitX and BitY          */
     984:	c8 2f       	mov	r28, r24
     986:	c6 95       	lsr	r28
     988:	c6 95       	lsr	r28
     98a:	c6 95       	lsr	r28
     98c:	c7 87       	std	Z+15, r28	; 0x0f
        ptcb->OSTCBBitY      = OSMapTbl[ptcb->OSTCBY];
     98e:	d0 e0       	ldi	r29, 0x00	; 0
     990:	c1 5d       	subi	r28, 0xD1	; 209
     992:	dd 4f       	sbci	r29, 0xFD	; 253
     994:	98 81       	ld	r25, Y
     996:	91 8b       	std	Z+17, r25	; 0x11
        ptcb->OSTCBX         = prio & 0x07;
     998:	c8 2f       	mov	r28, r24
     99a:	c7 70       	andi	r28, 0x07	; 7
     99c:	c6 87       	std	Z+14, r28	; 0x0e
        ptcb->OSTCBBitX      = OSMapTbl[ptcb->OSTCBX];
     99e:	d0 e0       	ldi	r29, 0x00	; 0
     9a0:	c1 5d       	subi	r28, 0xD1	; 209
     9a2:	dd 4f       	sbci	r29, 0xFD	; 253
     9a4:	98 81       	ld	r25, Y
     9a6:	90 8b       	std	Z+16, r25	; 0x10

#if     OS_MBOX_EN || (OS_Q_EN && (OS_MAX_QS >= 2)) || OS_SEM_EN
        ptcb->OSTCBEventPtr  = (OS_EVENT *)0;              /* Task is not pending on an event          */
     9a8:	17 82       	std	Z+7, r1	; 0x07
     9aa:	16 82       	std	Z+6, r1	; 0x06
#endif

#if     OS_MBOX_EN || (OS_Q_EN && (OS_MAX_QS >= 2))
        ptcb->OSTCBMsg       = (void *)0;                  /* No message received                      */
     9ac:	11 86       	std	Z+9, r1	; 0x09
     9ae:	10 86       	std	Z+8, r1	; 0x08
#endif

        OS_ENTER_CRITICAL();
     9b0:	f8 94       	cli
        OSTCBPrioTbl[prio]   = ptcb;
     9b2:	a8 2f       	mov	r26, r24
     9b4:	b0 e0       	ldi	r27, 0x00	; 0
     9b6:	aa 0f       	add	r26, r26
     9b8:	bb 1f       	adc	r27, r27
     9ba:	a0 5e       	subi	r26, 0xE0	; 224
     9bc:	b8 4f       	sbci	r27, 0xF8	; 248
     9be:	ed 93       	st	X+, r30
     9c0:	fc 93       	st	X, r31
        ptcb->OSTCBNext      = OSTCBList;                  /* Link into TCB chain                      */
     9c2:	a0 91 b7 06 	lds	r26, 0x06B7
     9c6:	b0 91 b8 06 	lds	r27, 0x06B8
     9ca:	b3 83       	std	Z+3, r27	; 0x03
     9cc:	a2 83       	std	Z+2, r26	; 0x02
        ptcb->OSTCBPrev      = (OS_TCB *)0;
     9ce:	15 82       	std	Z+5, r1	; 0x05
     9d0:	14 82       	std	Z+4, r1	; 0x04
        if (OSTCBList != (OS_TCB *)0) {
     9d2:	10 97       	sbiw	r26, 0x00	; 0
     9d4:	21 f0       	breq	.+8      	; 0x9de <OSTCBInit+0x88>
            OSTCBList->OSTCBPrev = ptcb;
     9d6:	15 96       	adiw	r26, 0x05	; 5
     9d8:	fc 93       	st	X, r31
     9da:	ee 93       	st	-X, r30
     9dc:	14 97       	sbiw	r26, 0x04	; 4
        }
        OSTCBList               = ptcb;
     9de:	f0 93 b8 06 	sts	0x06B8, r31
     9e2:	e0 93 b7 06 	sts	0x06B7, r30
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Make task ready to run                   */
     9e6:	90 91 c7 06 	lds	r25, 0x06C7
     9ea:	81 89       	ldd	r24, Z+17	; 0x11
     9ec:	89 2b       	or	r24, r25
     9ee:	80 93 c7 06 	sts	0x06C7, r24
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
     9f2:	a7 85       	ldd	r26, Z+15	; 0x0f
     9f4:	b0 e0       	ldi	r27, 0x00	; 0
     9f6:	a8 53       	subi	r26, 0x38	; 56
     9f8:	b9 4f       	sbci	r27, 0xF9	; 249
     9fa:	9c 91       	ld	r25, X
     9fc:	80 89       	ldd	r24, Z+16	; 0x10
     9fe:	89 2b       	or	r24, r25
     a00:	8c 93       	st	X, r24
        OS_EXIT_CRITICAL();
     a02:	78 94       	sei
        return (OS_NO_ERR);
     a04:	80 e0       	ldi	r24, 0x00	; 0
     a06:	02 c0       	rjmp	.+4      	; 0xa0c <OSTCBInit+0xb6>
    } else {
        OS_EXIT_CRITICAL();
     a08:	78 94       	sei
        return (OS_NO_MORE_TCB);
     a0a:	86 e4       	ldi	r24, 0x46	; 70
    }
}
     a0c:	df 91       	pop	r29
     a0e:	cf 91       	pop	r28
     a10:	08 95       	ret

00000a12 <OSTimeTick>:

void OSTimeTick (void)
{
    OS_TCB *ptcb;

    OSTimeTickHook();                                      /* Call user definable hook                 */
     a12:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <OSTimeTickHook>
	
    ptcb = OSTCBList;                                      /* Point at first TCB in TCB list           */
     a16:	e0 91 b7 06 	lds	r30, 0x06B7
     a1a:	f0 91 b8 06 	lds	r31, 0x06B8
    while (ptcb->OSTCBPrio != OS_IDLE_PRIO) {              /* Go through all TCBs in TCB list          */
     a1e:	85 85       	ldd	r24, Z+13	; 0x0d
     a20:	8f 33       	cpi	r24, 0x3F	; 63
     a22:	39 f1       	breq	.+78     	; 0xa72 <OSTimeTick+0x60>
     a24:	40 91 c7 06 	lds	r20, 0x06C7
            if (--ptcb->OSTCBDly == 0) {                   /* Decrement nbr of ticks to end of delay   */
                if (!(ptcb->OSTCBStat & OS_STAT_SUSPEND)) {    /* Is task suspended?                   */
                    OSRdyGrp               |= ptcb->OSTCBBitY; /* No,  Make task Rdy to Run (timed out)*/
                    OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
                } else {                                       /* Yes, Leave 1 tick to prevent ...     */
                    ptcb->OSTCBDly = 1;                        /* ... loosing the task when the ...    */
     a28:	21 e0       	ldi	r18, 0x01	; 1
     a2a:	30 e0       	ldi	r19, 0x00	; 0

    OSTimeTickHook();                                      /* Call user definable hook                 */
	
    ptcb = OSTCBList;                                      /* Point at first TCB in TCB list           */
    while (ptcb->OSTCBPrio != OS_IDLE_PRIO) {              /* Go through all TCBs in TCB list          */
        OS_ENTER_CRITICAL();
     a2c:	f8 94       	cli
        if (ptcb->OSTCBDly != 0) {                         /* Delayed or waiting for event with TO     */
     a2e:	82 85       	ldd	r24, Z+10	; 0x0a
     a30:	93 85       	ldd	r25, Z+11	; 0x0b
     a32:	00 97       	sbiw	r24, 0x00	; 0
     a34:	a9 f0       	breq	.+42     	; 0xa60 <OSTimeTick+0x4e>
            if (--ptcb->OSTCBDly == 0) {                   /* Decrement nbr of ticks to end of delay   */
     a36:	01 97       	sbiw	r24, 0x01	; 1
     a38:	93 87       	std	Z+11, r25	; 0x0b
     a3a:	82 87       	std	Z+10, r24	; 0x0a
     a3c:	89 2b       	or	r24, r25
     a3e:	81 f4       	brne	.+32     	; 0xa60 <OSTimeTick+0x4e>
                if (!(ptcb->OSTCBStat & OS_STAT_SUSPEND)) {    /* Is task suspended?                   */
     a40:	84 85       	ldd	r24, Z+12	; 0x0c
     a42:	83 fd       	sbrc	r24, 3
     a44:	0b c0       	rjmp	.+22     	; 0xa5c <OSTimeTick+0x4a>
                    OSRdyGrp               |= ptcb->OSTCBBitY; /* No,  Make task Rdy to Run (timed out)*/
     a46:	81 89       	ldd	r24, Z+17	; 0x11
                    OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
     a48:	a7 85       	ldd	r26, Z+15	; 0x0f
     a4a:	b0 e0       	ldi	r27, 0x00	; 0
     a4c:	a8 53       	subi	r26, 0x38	; 56
     a4e:	b9 4f       	sbci	r27, 0xF9	; 249
     a50:	5c 91       	ld	r21, X
     a52:	90 89       	ldd	r25, Z+16	; 0x10
     a54:	95 2b       	or	r25, r21
     a56:	9c 93       	st	X, r25
    while (ptcb->OSTCBPrio != OS_IDLE_PRIO) {              /* Go through all TCBs in TCB list          */
        OS_ENTER_CRITICAL();
        if (ptcb->OSTCBDly != 0) {                         /* Delayed or waiting for event with TO     */
            if (--ptcb->OSTCBDly == 0) {                   /* Decrement nbr of ticks to end of delay   */
                if (!(ptcb->OSTCBStat & OS_STAT_SUSPEND)) {    /* Is task suspended?                   */
                    OSRdyGrp               |= ptcb->OSTCBBitY; /* No,  Make task Rdy to Run (timed out)*/
     a58:	48 2b       	or	r20, r24
     a5a:	02 c0       	rjmp	.+4      	; 0xa60 <OSTimeTick+0x4e>
                    OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
                } else {                                       /* Yes, Leave 1 tick to prevent ...     */
                    ptcb->OSTCBDly = 1;                        /* ... loosing the task when the ...    */
     a5c:	33 87       	std	Z+11, r19	; 0x0b
     a5e:	22 87       	std	Z+10, r18	; 0x0a
                }                                              /* ... suspension is removed.           */
            }
        }
        ptcb = ptcb->OSTCBNext;                            /* Point at next TCB in TCB list            */
     a60:	02 80       	ldd	r0, Z+2	; 0x02
     a62:	f3 81       	ldd	r31, Z+3	; 0x03
     a64:	e0 2d       	mov	r30, r0
        OS_EXIT_CRITICAL();
     a66:	78 94       	sei
    OS_TCB *ptcb;

    OSTimeTickHook();                                      /* Call user definable hook                 */
	
    ptcb = OSTCBList;                                      /* Point at first TCB in TCB list           */
    while (ptcb->OSTCBPrio != OS_IDLE_PRIO) {              /* Go through all TCBs in TCB list          */
     a68:	85 85       	ldd	r24, Z+13	; 0x0d
     a6a:	8f 33       	cpi	r24, 0x3F	; 63
     a6c:	f9 f6       	brne	.-66     	; 0xa2c <OSTimeTick+0x1a>
     a6e:	40 93 c7 06 	sts	0x06C7, r20
        }
        ptcb = ptcb->OSTCBNext;                            /* Point at next TCB in TCB list            */
        OS_EXIT_CRITICAL();
    }
	
    OS_ENTER_CRITICAL();                                   /* Update the 32-bit tick counter           */
     a72:	f8 94       	cli
    OSTime++;
     a74:	80 91 d5 06 	lds	r24, 0x06D5
     a78:	90 91 d6 06 	lds	r25, 0x06D6
     a7c:	a0 91 d7 06 	lds	r26, 0x06D7
     a80:	b0 91 d8 06 	lds	r27, 0x06D8
     a84:	01 96       	adiw	r24, 0x01	; 1
     a86:	a1 1d       	adc	r26, r1
     a88:	b1 1d       	adc	r27, r1
     a8a:	80 93 d5 06 	sts	0x06D5, r24
     a8e:	90 93 d6 06 	sts	0x06D6, r25
     a92:	a0 93 d7 06 	sts	0x06D7, r26
     a96:	b0 93 d8 06 	sts	0x06D8, r27
    OS_EXIT_CRITICAL();
     a9a:	78 94       	sei
     a9c:	08 95       	ret

00000a9e <OSMboxCreate>:
*              == (void *)0  if no event control blocks were available
*********************************************************************************************************
*/

OS_EVENT *OSMboxCreate (void *msg)
{
     a9e:	cf 93       	push	r28
     aa0:	df 93       	push	r29
    OS_EVENT *pevent;


    OS_ENTER_CRITICAL();
     aa2:	f8 94       	cli
    pevent = OSEventFreeList;                    /* Get next free event control block                  */
     aa4:	c0 91 d0 06 	lds	r28, 0x06D0
     aa8:	d0 91 d1 06 	lds	r29, 0x06D1
    if (OSEventFreeList != (OS_EVENT *)0) {      /* See if pool of free ECB pool was empty             */
     aac:	20 97       	sbiw	r28, 0x00	; 0
     aae:	31 f0       	breq	.+12     	; 0xabc <OSMboxCreate+0x1e>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
     ab0:	28 81       	ld	r18, Y
     ab2:	39 81       	ldd	r19, Y+1	; 0x01
     ab4:	30 93 d1 06 	sts	0x06D1, r19
     ab8:	20 93 d0 06 	sts	0x06D0, r18
    }
    OS_EXIT_CRITICAL();
     abc:	78 94       	sei
    if (pevent != (OS_EVENT *)0) {
     abe:	20 97       	sbiw	r28, 0x00	; 0
     ac0:	39 f0       	breq	.+14     	; 0xad0 <OSMboxCreate+0x32>
        pevent->OSEventType = OS_EVENT_TYPE_MBOX;
     ac2:	21 e0       	ldi	r18, 0x01	; 1
     ac4:	2c 87       	std	Y+12, r18	; 0x0c
        pevent->OSEventPtr  = msg;               /* Deposit message in event control block             */
     ac6:	99 83       	std	Y+1, r25	; 0x01
     ac8:	88 83       	st	Y, r24
        OSEventWaitListInit(pevent);
     aca:	ce 01       	movw	r24, r28
     acc:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <OSEventWaitListInit>
    }
    return (pevent);                             /* Return pointer to event control block              */
}
     ad0:	ce 01       	movw	r24, r28
     ad2:	df 91       	pop	r29
     ad4:	cf 91       	pop	r28
     ad6:	08 95       	ret

00000ad8 <OSSemCreate>:
*              == (void *)0  if no event control blocks were available
*********************************************************************************************************
*/

OS_EVENT *OSSemCreate (INT16U cnt)
{
     ad8:	cf 93       	push	r28
     ada:	df 93       	push	r29
    OS_EVENT *pevent;


    OS_ENTER_CRITICAL();
     adc:	f8 94       	cli
    pevent = OSEventFreeList;                              /* Get next free event control block        */
     ade:	c0 91 d0 06 	lds	r28, 0x06D0
     ae2:	d0 91 d1 06 	lds	r29, 0x06D1
    if (OSEventFreeList != (OS_EVENT *)0) {                /* See if pool of free ECB pool was empty   */
     ae6:	20 97       	sbiw	r28, 0x00	; 0
     ae8:	31 f0       	breq	.+12     	; 0xaf6 <OSSemCreate+0x1e>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
     aea:	28 81       	ld	r18, Y
     aec:	39 81       	ldd	r19, Y+1	; 0x01
     aee:	30 93 d1 06 	sts	0x06D1, r19
     af2:	20 93 d0 06 	sts	0x06D0, r18
    }
    OS_EXIT_CRITICAL();
     af6:	78 94       	sei
    if (pevent != (OS_EVENT *)0) {                         /* Get an event control block               */
     af8:	20 97       	sbiw	r28, 0x00	; 0
     afa:	39 f0       	breq	.+14     	; 0xb0a <OSSemCreate+0x32>
        pevent->OSEventType = OS_EVENT_TYPE_SEM;
     afc:	23 e0       	ldi	r18, 0x03	; 3
     afe:	2c 87       	std	Y+12, r18	; 0x0c
        pevent->OSEventCnt  = cnt;                         /* Set semaphore value                      */
     b00:	9b 87       	std	Y+11, r25	; 0x0b
     b02:	8a 87       	std	Y+10, r24	; 0x0a
        OSEventWaitListInit(pevent);
     b04:	ce 01       	movw	r24, r28
     b06:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <OSEventWaitListInit>
    }
    return (pevent);
}
     b0a:	ce 01       	movw	r24, r28
     b0c:	df 91       	pop	r29
     b0e:	cf 91       	pop	r28
     b10:	08 95       	ret

00000b12 <OSSemPost>:
*********************************************************************************************************
*/

INT8U OSSemPost (OS_EVENT *pevent)
{
    OS_ENTER_CRITICAL();
     b12:	f8 94       	cli
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
     b14:	fc 01       	movw	r30, r24
     b16:	24 85       	ldd	r18, Z+12	; 0x0c
     b18:	23 30       	cpi	r18, 0x03	; 3
     b1a:	19 f0       	breq	.+6      	; 0xb22 <OSSemPost+0x10>
        OS_EXIT_CRITICAL();
     b1c:	78 94       	sei
        return (OS_ERR_EVENT_TYPE);
     b1e:	81 e0       	ldi	r24, 0x01	; 1
     b20:	08 95       	ret
    }
    if (pevent->OSEventGrp) {                              /* See if any task waiting for semaphore    */
     b22:	fc 01       	movw	r30, r24
     b24:	25 85       	ldd	r18, Z+13	; 0x0d
     b26:	22 23       	and	r18, r18
     b28:	51 f0       	breq	.+20     	; 0xb3e <OSSemPost+0x2c>
        OSEventTaskRdy(pevent, (void *)0, OS_STAT_SEM);    /* Ready highest prio task waiting on event */
     b2a:	41 e0       	ldi	r20, 0x01	; 1
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	0e 94 97 03 	call	0x72e	; 0x72e <OSEventTaskRdy>
        OS_EXIT_CRITICAL();
     b34:	78 94       	sei
        OSSched();                                    /* Find highest priority task ready to run       */
     b36:	0e 94 3b 04 	call	0x876	; 0x876 <OSSched>
        return (OS_NO_ERR);
     b3a:	80 e0       	ldi	r24, 0x00	; 0
     b3c:	08 95       	ret
    } else {
        if (pevent->OSEventCnt < 65535) {             /* Make sure semaphore will not overflow         */
     b3e:	fc 01       	movw	r30, r24
     b40:	22 85       	ldd	r18, Z+10	; 0x0a
     b42:	33 85       	ldd	r19, Z+11	; 0x0b
     b44:	2f 3f       	cpi	r18, 0xFF	; 255
     b46:	ff ef       	ldi	r31, 0xFF	; 255
     b48:	3f 07       	cpc	r19, r31
     b4a:	41 f0       	breq	.+16     	; 0xb5c <OSSemPost+0x4a>
            pevent->OSEventCnt++;                     /* Increment semaphore count to register event   */
     b4c:	2f 5f       	subi	r18, 0xFF	; 255
     b4e:	3f 4f       	sbci	r19, 0xFF	; 255
     b50:	fc 01       	movw	r30, r24
     b52:	33 87       	std	Z+11, r19	; 0x0b
     b54:	22 87       	std	Z+10, r18	; 0x0a
            OS_EXIT_CRITICAL();
     b56:	78 94       	sei
            return (OS_NO_ERR);
     b58:	80 e0       	ldi	r24, 0x00	; 0
     b5a:	08 95       	ret
        } else {                                      /* Semaphore value has reached its maximum       */
            OS_EXIT_CRITICAL();
     b5c:	78 94       	sei
            return (OS_SEM_OVF);
     b5e:	82 e3       	ldi	r24, 0x32	; 50
        }
    }
}
     b60:	08 95       	ret

00000b62 <OSTaskCreate>:
*********************************************************************************************************
*/

#if OS_TASK_CREATE_EN
INT8U OSTaskCreate (void (*task)(void *pd), void *pdata, OS_STK *ptos, INT8U prio)
{
     b62:	bf 92       	push	r11
     b64:	cf 92       	push	r12
     b66:	df 92       	push	r13
     b68:	ef 92       	push	r14
     b6a:	ff 92       	push	r15
     b6c:	0f 93       	push	r16
     b6e:	1f 93       	push	r17
     b70:	cf 93       	push	r28
     b72:	df 93       	push	r29
     b74:	b2 2e       	mov	r11, r18

#if 0
	DebugPulse();
#endif	
	
    if (prio > OS_LOWEST_PRIO) 
     b76:	2f e3       	ldi	r18, 0x3F	; 63
     b78:	2b 15       	cp	r18, r11
     b7a:	08 f4       	brcc	.+2      	; 0xb7e <OSTaskCreate+0x1c>
     b7c:	4f c0       	rjmp	.+158    	; 0xc1c <OSTaskCreate+0xba>
	{             /* Make sure priority is within allowable range           */
        return (OS_PRIO_INVALID);
    }
    OS_ENTER_CRITICAL();
     b7e:	f8 94       	cli
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
     b80:	cb 2d       	mov	r28, r11
     b82:	d0 e0       	ldi	r29, 0x00	; 0
     b84:	fe 01       	movw	r30, r28
     b86:	ee 0f       	add	r30, r30
     b88:	ff 1f       	adc	r31, r31
     b8a:	e0 5e       	subi	r30, 0xE0	; 224
     b8c:	f8 4f       	sbci	r31, 0xF8	; 248
     b8e:	01 90       	ld	r0, Z+
     b90:	f0 81       	ld	r31, Z
     b92:	e0 2d       	mov	r30, r0
     b94:	ef 2b       	or	r30, r31
     b96:	09 f0       	breq	.+2      	; 0xb9a <OSTaskCreate+0x38>
     b98:	3e c0       	rjmp	.+124    	; 0xc16 <OSTaskCreate+0xb4>
        OSTCBPrioTbl[prio] = (OS_TCB *)1;    /* Reserve the priority to prevent others from doing ...  */
     b9a:	fe 01       	movw	r30, r28
     b9c:	ee 0f       	add	r30, r30
     b9e:	ff 1f       	adc	r31, r31
     ba0:	e0 5e       	subi	r30, 0xE0	; 224
     ba2:	f8 4f       	sbci	r31, 0xF8	; 248
     ba4:	21 e0       	ldi	r18, 0x01	; 1
     ba6:	30 e0       	ldi	r19, 0x00	; 0
     ba8:	31 83       	std	Z+1, r19	; 0x01
     baa:	20 83       	st	Z, r18
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();
     bac:	78 94       	sei
		
        psp = (void *)OSTaskStkInit(task, pdata, ptos, 0); /* Initialize the task's stack              */
     bae:	20 e0       	ldi	r18, 0x00	; 0
     bb0:	30 e0       	ldi	r19, 0x00	; 0
     bb2:	0e 94 1e 03 	call	0x63c	; 0x63c <OSTaskStkInit>
		
        err = OSTCBInit(prio, psp, (void *)0, 0, 0, (void *)0, 0);         
     bb6:	c1 2c       	mov	r12, r1
     bb8:	d1 2c       	mov	r13, r1
     bba:	e1 2c       	mov	r14, r1
     bbc:	f1 2c       	mov	r15, r1
     bbe:	00 e0       	ldi	r16, 0x00	; 0
     bc0:	10 e0       	ldi	r17, 0x00	; 0
     bc2:	20 e0       	ldi	r18, 0x00	; 0
     bc4:	30 e0       	ldi	r19, 0x00	; 0
     bc6:	40 e0       	ldi	r20, 0x00	; 0
     bc8:	50 e0       	ldi	r21, 0x00	; 0
     bca:	bc 01       	movw	r22, r24
     bcc:	8b 2d       	mov	r24, r11
     bce:	0e 94 ab 04 	call	0x956	; 0x956 <OSTCBInit>
        if (err == OS_NO_ERR) {
     bd2:	81 11       	cpse	r24, r1
     bd4:	17 c0       	rjmp	.+46     	; 0xc04 <OSTaskCreate+0xa2>
            OS_ENTER_CRITICAL();
     bd6:	f8 94       	cli
            OSTaskCtr++;                                   /* Increment the #tasks counter             */
     bd8:	80 91 c4 06 	lds	r24, 0x06C4
     bdc:	8f 5f       	subi	r24, 0xFF	; 255
     bde:	80 93 c4 06 	sts	0x06C4, r24
            OSTaskCreateHook(OSTCBPrioTbl[prio]);          /* Call user defined hook                   */
     be2:	cc 0f       	add	r28, r28
     be4:	dd 1f       	adc	r29, r29
     be6:	c0 5e       	subi	r28, 0xE0	; 224
     be8:	d8 4f       	sbci	r29, 0xF8	; 248
     bea:	88 81       	ld	r24, Y
     bec:	99 81       	ldd	r25, Y+1	; 0x01
     bee:	0e 94 68 03 	call	0x6d0	; 0x6d0 <OSTaskCreateHook>
            OS_EXIT_CRITICAL();
     bf2:	78 94       	sei
            if (OSRunning) {                 /* Find highest priority task if multitasking has started */
     bf4:	80 91 b0 06 	lds	r24, 0x06B0
     bf8:	88 23       	and	r24, r24
     bfa:	91 f0       	breq	.+36     	; 0xc20 <OSTaskCreate+0xbe>
#if 0
				DebugPulse();
#endif					
                OSSched();
     bfc:	0e 94 3b 04 	call	0x876	; 0x876 <OSSched>

#if 0
		DebugPulse();
#endif	
		
        return (err);
     c00:	80 e0       	ldi	r24, 0x00	; 0
     c02:	0f c0       	rjmp	.+30     	; 0xc22 <OSTaskCreate+0xc0>
				DebugPulse();
#endif					
                OSSched();
            }
        } else {
            OS_ENTER_CRITICAL();
     c04:	f8 94       	cli
            OSTCBPrioTbl[prio] = (OS_TCB *)0;/* Make this priority available to others                 */
     c06:	cc 0f       	add	r28, r28
     c08:	dd 1f       	adc	r29, r29
     c0a:	c0 5e       	subi	r28, 0xE0	; 224
     c0c:	d8 4f       	sbci	r29, 0xF8	; 248
     c0e:	19 82       	std	Y+1, r1	; 0x01
     c10:	18 82       	st	Y, r1
            OS_EXIT_CRITICAL();
     c12:	78 94       	sei
     c14:	06 c0       	rjmp	.+12     	; 0xc22 <OSTaskCreate+0xc0>
		DebugPulse();
#endif	
		
        return (err);
    } else {
        OS_EXIT_CRITICAL();
     c16:	78 94       	sei
        return (OS_PRIO_EXIST);
     c18:	88 e2       	ldi	r24, 0x28	; 40
     c1a:	03 c0       	rjmp	.+6      	; 0xc22 <OSTaskCreate+0xc0>
	DebugPulse();
#endif	
	
    if (prio > OS_LOWEST_PRIO) 
	{             /* Make sure priority is within allowable range           */
        return (OS_PRIO_INVALID);
     c1c:	8a e2       	ldi	r24, 0x2A	; 42
     c1e:	01 c0       	rjmp	.+2      	; 0xc22 <OSTaskCreate+0xc0>

#if 0
		DebugPulse();
#endif	
		
        return (err);
     c20:	80 e0       	ldi	r24, 0x00	; 0
    } else {
        OS_EXIT_CRITICAL();
        return (OS_PRIO_EXIST);
    }	
}
     c22:	df 91       	pop	r29
     c24:	cf 91       	pop	r28
     c26:	1f 91       	pop	r17
     c28:	0f 91       	pop	r16
     c2a:	ff 90       	pop	r15
     c2c:	ef 90       	pop	r14
     c2e:	df 90       	pop	r13
     c30:	cf 90       	pop	r12
     c32:	bf 90       	pop	r11
     c34:	08 95       	ret

00000c36 <OSInit>:
* Returns    : none
*********************************************************************************************************
*/

void OSInit (void)
{
     c36:	cf 93       	push	r28
     c38:	df 93       	push	r29
#if 0
	DebugPulse();
#endif	


    OSTime        = 0L;                                    /* Clear the 32-bit system clock            */
     c3a:	10 92 d5 06 	sts	0x06D5, r1
     c3e:	10 92 d6 06 	sts	0x06D6, r1
     c42:	10 92 d7 06 	sts	0x06D7, r1
     c46:	10 92 d8 06 	sts	0x06D8, r1
    OSIntNesting  = 0;                                     /* Clear the interrupt nesting counter      */
     c4a:	10 92 d2 06 	sts	0x06D2, r1
    OSLockNesting = 0;                                     /* Clear the scheduling lock counter        */
     c4e:	10 92 af 06 	sts	0x06AF, r1
#if OS_TASK_CREATE_EN  || OS_TASK_CREATE_EXT_EN || OS_TASK_DEL_EN
    OSTaskCtr     = 0;                                     /* Clear the number of tasks                */
     c52:	10 92 c4 06 	sts	0x06C4, r1
#endif
    OSRunning     = FALSE;                                 /* Indicate that multitasking not started   */
     c56:	10 92 b0 06 	sts	0x06B0, r1
    OSIdleCtr     = 0L;                                    /* Clear the 32-bit idle counter            */
     c5a:	10 92 b1 06 	sts	0x06B1, r1
     c5e:	10 92 b2 06 	sts	0x06B2, r1
     c62:	10 92 b3 06 	sts	0x06B3, r1
     c66:	10 92 b4 06 	sts	0x06B4, r1
#if OS_TASK_STAT_EN && OS_TASK_CREATE_EXT_EN
    OSIdleCtrRun  = 0L;
    OSIdleCtrMax  = 0L;
    OSStatRdy     = FALSE;                                 /* Statistic task is not ready              */
#endif
    OSCtxSwCtr    = 0;                                     /* Clear the context switch counter         */
     c6a:	10 92 b9 06 	sts	0x06B9, r1
     c6e:	10 92 ba 06 	sts	0x06BA, r1
     c72:	10 92 bb 06 	sts	0x06BB, r1
     c76:	10 92 bc 06 	sts	0x06BC, r1
    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
     c7a:	10 92 c7 06 	sts	0x06C7, r1
     c7e:	e8 ec       	ldi	r30, 0xC8	; 200
     c80:	f6 e0       	ldi	r31, 0x06	; 6
     c82:	80 ed       	ldi	r24, 0xD0	; 208
     c84:	96 e0       	ldi	r25, 0x06	; 6
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
        OSRdyTbl[i] = 0;
     c86:	11 92       	st	Z+, r1
    OSIdleCtrMax  = 0L;
    OSStatRdy     = FALSE;                                 /* Statistic task is not ready              */
#endif
    OSCtxSwCtr    = 0;                                     /* Clear the context switch counter         */
    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
     c88:	e8 17       	cp	r30, r24
     c8a:	f9 07       	cpc	r31, r25
     c8c:	e1 f7       	brne	.-8      	; 0xc86 <OSInit+0x50>
        OSRdyTbl[i] = 0;
    }
                
    OSPrioCur     = 0;
     c8e:	10 92 b6 06 	sts	0x06B6, r1
    OSPrioHighRdy = 0;                                           
     c92:	10 92 b5 06 	sts	0x06B5, r1
    OSTCBHighRdy  = (OS_TCB *)0;                                 /* TCB Initialization                 */
     c96:	10 92 c6 06 	sts	0x06C6, r1
     c9a:	10 92 c5 06 	sts	0x06C5, r1
    OSTCBCur      = (OS_TCB *)0;
     c9e:	10 92 d4 06 	sts	0x06D4, r1
     ca2:	10 92 d3 06 	sts	0x06D3, r1
    OSTCBList     = (OS_TCB *)0;
     ca6:	10 92 b8 06 	sts	0x06B8, r1
     caa:	10 92 b7 06 	sts	0x06B7, r1
     cae:	e0 e2       	ldi	r30, 0x20	; 32
     cb0:	f7 e0       	ldi	r31, 0x07	; 7
     cb2:	80 ea       	ldi	r24, 0xA0	; 160
     cb4:	97 e0       	ldi	r25, 0x07	; 7
    for (i = 0; i < (OS_LOWEST_PRIO + 1); i++) {                 /* Clear the priority table           */
        OSTCBPrioTbl[i] = (OS_TCB *)0;
     cb6:	11 92       	st	Z+, r1
     cb8:	11 92       	st	Z+, r1
    OSPrioCur     = 0;
    OSPrioHighRdy = 0;                                           
    OSTCBHighRdy  = (OS_TCB *)0;                                 /* TCB Initialization                 */
    OSTCBCur      = (OS_TCB *)0;
    OSTCBList     = (OS_TCB *)0;
    for (i = 0; i < (OS_LOWEST_PRIO + 1); i++) {                 /* Clear the priority table           */
     cba:	e8 17       	cp	r30, r24
     cbc:	f9 07       	cpc	r31, r25
     cbe:	d9 f7       	brne	.-10     	; 0xcb6 <OSInit+0x80>
     cc0:	8a e4       	ldi	r24, 0x4A	; 74
     cc2:	92 e0       	ldi	r25, 0x02	; 2
     cc4:	2c ee       	ldi	r18, 0xEC	; 236
     cc6:	32 e0       	ldi	r19, 0x02	; 2
     cc8:	fc 01       	movw	r30, r24
     cca:	70 97       	sbiw	r30, 0x10	; 16
        OSTCBPrioTbl[i] = (OS_TCB *)0;
    }
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
        OSTCBTbl[i].OSTCBNext = &OSTCBTbl[i + 1];
     ccc:	91 83       	std	Z+1, r25	; 0x01
     cce:	80 83       	st	Z, r24
     cd0:	42 96       	adiw	r24, 0x12	; 18
    OSTCBCur      = (OS_TCB *)0;
    OSTCBList     = (OS_TCB *)0;
    for (i = 0; i < (OS_LOWEST_PRIO + 1); i++) {                 /* Clear the priority table           */
        OSTCBPrioTbl[i] = (OS_TCB *)0;
    }
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
     cd2:	82 17       	cp	r24, r18
     cd4:	93 07       	cpc	r25, r19
     cd6:	c1 f7       	brne	.-16     	; 0xcc8 <OSInit+0x92>
        OSTCBTbl[i].OSTCBNext = &OSTCBTbl[i + 1];
    }
    OSTCBTbl[OS_MAX_TASKS + OS_N_SYS_TASKS - 1].OSTCBNext = (OS_TCB *)0;    /* Last OS_TCB             */
     cd8:	10 92 dd 02 	sts	0x02DD, r1
     cdc:	10 92 dc 02 	sts	0x02DC, r1
    OSTCBFreeList                                         = &OSTCBTbl[0];
     ce0:	88 e3       	ldi	r24, 0x38	; 56
     ce2:	92 e0       	ldi	r25, 0x02	; 2
     ce4:	90 93 c2 06 	sts	0x06C2, r25
     ce8:	80 93 c1 06 	sts	0x06C1, r24

#if OS_MAX_EVENTS >= 2
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {            /* Init. list of free EVENT control blocks  */
        OSEventTbl[i].OSEventPtr = (OS_EVENT *)&OSEventTbl[i + 1];
     cec:	e9 ed       	ldi	r30, 0xD9	; 217
     cee:	f6 e0       	ldi	r31, 0x06	; 6
     cf0:	c7 ee       	ldi	r28, 0xE7	; 231
     cf2:	d6 e0       	ldi	r29, 0x06	; 6
     cf4:	d1 83       	std	Z+1, r29	; 0x01
     cf6:	c0 83       	st	Z, r28
     cf8:	a5 ef       	ldi	r26, 0xF5	; 245
     cfa:	b6 e0       	ldi	r27, 0x06	; 6
     cfc:	b9 83       	std	Y+1, r27	; 0x01
     cfe:	a8 83       	st	Y, r26
     d00:	c3 e0       	ldi	r28, 0x03	; 3
     d02:	d7 e0       	ldi	r29, 0x07	; 7
     d04:	cd 93       	st	X+, r28
     d06:	dc 93       	st	X, r29
     d08:	a1 e1       	ldi	r26, 0x11	; 17
     d0a:	b7 e0       	ldi	r27, 0x07	; 7
     d0c:	b9 83       	std	Y+1, r27	; 0x01
     d0e:	a8 83       	st	Y, r26
    }
    OSEventTbl[OS_MAX_EVENTS - 1].OSEventPtr = (OS_EVENT *)0;
     d10:	1d 92       	st	X+, r1
     d12:	1c 92       	st	X, r1
    OSEventFreeList                          = &OSEventTbl[0];    
     d14:	f0 93 d1 06 	sts	0x06D1, r31
     d18:	e0 93 d0 06 	sts	0x06D0, r30
                    &OSTaskIdleStk[0],                         /* Set Bottom-Of-Stack                  */
                    OS_TASK_IDLE_STK_SIZE, 
                    (void *)0,                                 /* No TCB extension                     */
                    OS_TASK_OPT_STK_CHK | OS_TASK_OPT_STK_CLR);/* Enable stack checking + clear stack  */
    #else
    OSTaskCreate(OSTaskIdle, (void *)0, &OSTaskIdleStk[OS_TASK_IDLE_STK_SIZE - 1], OS_IDLE_PRIO);
     d1c:	2f e3       	ldi	r18, 0x3F	; 63
     d1e:	4b e6       	ldi	r20, 0x6B	; 107
     d20:	53 e0       	ldi	r21, 0x03	; 3
     d22:	60 e0       	ldi	r22, 0x00	; 0
     d24:	70 e0       	ldi	r23, 0x00	; 0
     d26:	84 e9       	ldi	r24, 0x94	; 148
     d28:	93 e0       	ldi	r25, 0x03	; 3
     d2a:	0e 94 b1 05 	call	0xb62	; 0xb62 <OSTaskCreate>
                        (void *)0,                                /* No TCB extension                  */
                        OS_TASK_OPT_STK_CHK | OS_TASK_OPT_STK_CLR);  /* Enable stack checking + clear  */
        #endif
    #else
        #if OS_STK_GROWTH == 1
        OSTaskCreate(OSTaskStat, 
     d2e:	2e e3       	ldi	r18, 0x3E	; 62
     d30:	4b e2       	ldi	r20, 0x2B	; 43
     d32:	53 e0       	ldi	r21, 0x03	; 3
     d34:	60 e0       	ldi	r22, 0x00	; 0
     d36:	70 e0       	ldi	r23, 0x00	; 0
     d38:	8a ee       	ldi	r24, 0xEA	; 234
     d3a:	96 e0       	ldi	r25, 0x06	; 6
     d3c:	0e 94 b1 05 	call	0xb62	; 0xb62 <OSTaskCreate>
                     &OSTaskStatStk[0],                           /* Set Top-Of-Stack                  */
                     OS_STAT_PRIO);                               /* One higher than the idle task     */
        #endif
    #endif
#endif
}
     d40:	df 91       	pop	r29
     d42:	cf 91       	pop	r28
     d44:	08 95       	ret

00000d46 <OSTimeDly>:
*********************************************************************************************************
*/

void OSTimeDly (INT16U ticks)
{
    if (ticks > 0) {                                                      /* 0 means no delay!         */
     d46:	00 97       	sbiw	r24, 0x00	; 0
     d48:	e1 f0       	breq	.+56     	; 0xd82 <OSTimeDly+0x3c>
        OS_ENTER_CRITICAL();
     d4a:	f8 94       	cli
        if ((OSRdyTbl[OSTCBCur->OSTCBY] &= ~OSTCBCur->OSTCBBitX) == 0) {  /* Delay current task        */
     d4c:	e0 91 d3 06 	lds	r30, 0x06D3
     d50:	f0 91 d4 06 	lds	r31, 0x06D4
     d54:	a7 85       	ldd	r26, Z+15	; 0x0f
     d56:	b0 e0       	ldi	r27, 0x00	; 0
     d58:	a8 53       	subi	r26, 0x38	; 56
     d5a:	b9 4f       	sbci	r27, 0xF9	; 249
     d5c:	20 89       	ldd	r18, Z+16	; 0x10
     d5e:	20 95       	com	r18
     d60:	3c 91       	ld	r19, X
     d62:	23 23       	and	r18, r19
     d64:	2c 93       	st	X, r18
     d66:	21 11       	cpse	r18, r1
     d68:	07 c0       	rjmp	.+14     	; 0xd78 <OSTimeDly+0x32>
            OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
     d6a:	21 89       	ldd	r18, Z+17	; 0x11
     d6c:	20 95       	com	r18
     d6e:	30 91 c7 06 	lds	r19, 0x06C7
     d72:	23 23       	and	r18, r19
     d74:	20 93 c7 06 	sts	0x06C7, r18
        }
        OSTCBCur->OSTCBDly = ticks;                                       /* Load ticks in TCB         */
     d78:	93 87       	std	Z+11, r25	; 0x0b
     d7a:	82 87       	std	Z+10, r24	; 0x0a
        OS_EXIT_CRITICAL();
     d7c:	78 94       	sei
        OSSched();                                                        /* Find next task to run!    */
     d7e:	0e 94 3b 04 	call	0x876	; 0x876 <OSSched>
     d82:	08 95       	ret

00000d84 <OSStatInit>:
*/

#if OS_TASK_STAT_EN
void OSStatInit (void)
{
    OSTimeDly(2);                                /* Synchronize with clock tick                        */
     d84:	82 e0       	ldi	r24, 0x02	; 2
     d86:	90 e0       	ldi	r25, 0x00	; 0
     d88:	0e 94 a3 06 	call	0xd46	; 0xd46 <OSTimeDly>
    OS_ENTER_CRITICAL();
     d8c:	f8 94       	cli
    OSIdleCtr    = 0L;                           /* Clear idle counter                                 */
     d8e:	10 92 b1 06 	sts	0x06B1, r1
     d92:	10 92 b2 06 	sts	0x06B2, r1
     d96:	10 92 b3 06 	sts	0x06B3, r1
     d9a:	10 92 b4 06 	sts	0x06B4, r1
    OS_EXIT_CRITICAL();
     d9e:	78 94       	sei
    OSTimeDly(OS_TICKS_PER_SEC);                 /* Determine MAX. idle counter value for 1 second     */
     da0:	88 ec       	ldi	r24, 0xC8	; 200
     da2:	90 e0       	ldi	r25, 0x00	; 0
     da4:	0e 94 a3 06 	call	0xd46	; 0xd46 <OSTimeDly>
    OS_ENTER_CRITICAL();
     da8:	f8 94       	cli
    OSIdleCtrMax = OSIdleCtr;                    /* Store maximum idle counter count in 1 second       */
     daa:	80 91 b1 06 	lds	r24, 0x06B1
     dae:	90 91 b2 06 	lds	r25, 0x06B2
     db2:	a0 91 b3 06 	lds	r26, 0x06B3
     db6:	b0 91 b4 06 	lds	r27, 0x06B4
     dba:	80 93 bd 06 	sts	0x06BD, r24
     dbe:	90 93 be 06 	sts	0x06BE, r25
     dc2:	a0 93 bf 06 	sts	0x06BF, r26
     dc6:	b0 93 c0 06 	sts	0x06C0, r27
    OSStatRdy    = TRUE;
     dca:	81 e0       	ldi	r24, 0x01	; 1
     dcc:	80 93 1f 07 	sts	0x071F, r24
    OS_EXIT_CRITICAL();
     dd0:	78 94       	sei
     dd2:	08 95       	ret

00000dd4 <OSTaskStat>:
    INT32U run;
    INT8S  usage;
    
    
    pdata = pdata;                               /* Prevent compiler warning for not using 'pdata'     */
    while (OSStatRdy == FALSE) {
     dd4:	80 91 1f 07 	lds	r24, 0x071F
     dd8:	81 11       	cpse	r24, r1
     dda:	08 c0       	rjmp	.+16     	; 0xdec <OSTaskStat+0x18>
        OSTimeDly(2 * OS_TICKS_PER_SEC);             /* Wait until statistic task is ready                 */
     ddc:	80 e9       	ldi	r24, 0x90	; 144
     dde:	91 e0       	ldi	r25, 0x01	; 1
     de0:	0e 94 a3 06 	call	0xd46	; 0xd46 <OSTimeDly>
    INT32U run;
    INT8S  usage;
    
    
    pdata = pdata;                               /* Prevent compiler warning for not using 'pdata'     */
    while (OSStatRdy == FALSE) {
     de4:	80 91 1f 07 	lds	r24, 0x071F
     de8:	88 23       	and	r24, r24
     dea:	c1 f3       	breq	.-16     	; 0xddc <OSTaskStat+0x8>
        OSIdleCtrRun = OSIdleCtr;                /* Obtain the of the idle counter for the past second */
        run          = OSIdleCtr;
        OSIdleCtr    = 0L;                       /* Reset the idle counter for the next second         */
        OS_EXIT_CRITICAL();
        if (OSIdleCtrMax > 0L) {
            usage = (INT8S)(100L - 100L * run / OSIdleCtrMax);
     dec:	c4 e6       	ldi	r28, 0x64	; 100
    pdata = pdata;                               /* Prevent compiler warning for not using 'pdata'     */
    while (OSStatRdy == FALSE) {
        OSTimeDly(2 * OS_TICKS_PER_SEC);             /* Wait until statistic task is ready                 */
    }
    for (;;) {
        OS_ENTER_CRITICAL();
     dee:	f8 94       	cli
        OSIdleCtrRun = OSIdleCtr;                /* Obtain the of the idle counter for the past second */
     df0:	20 91 b1 06 	lds	r18, 0x06B1
     df4:	30 91 b2 06 	lds	r19, 0x06B2
     df8:	40 91 b3 06 	lds	r20, 0x06B3
     dfc:	50 91 b4 06 	lds	r21, 0x06B4
     e00:	20 93 a0 07 	sts	0x07A0, r18
     e04:	30 93 a1 07 	sts	0x07A1, r19
     e08:	40 93 a2 07 	sts	0x07A2, r20
     e0c:	50 93 a3 07 	sts	0x07A3, r21
        run          = OSIdleCtr;
        OSIdleCtr    = 0L;                       /* Reset the idle counter for the next second         */
     e10:	10 92 b1 06 	sts	0x06B1, r1
     e14:	10 92 b2 06 	sts	0x06B2, r1
     e18:	10 92 b3 06 	sts	0x06B3, r1
     e1c:	10 92 b4 06 	sts	0x06B4, r1
        OS_EXIT_CRITICAL();
     e20:	78 94       	sei
        if (OSIdleCtrMax > 0L) {
     e22:	c0 90 bd 06 	lds	r12, 0x06BD
     e26:	d0 90 be 06 	lds	r13, 0x06BE
     e2a:	e0 90 bf 06 	lds	r14, 0x06BF
     e2e:	f0 90 c0 06 	lds	r15, 0x06C0
     e32:	c1 14       	cp	r12, r1
     e34:	d1 04       	cpc	r13, r1
     e36:	e1 04       	cpc	r14, r1
     e38:	f1 04       	cpc	r15, r1
     e3a:	b9 f0       	breq	.+46     	; 0xe6a <OSTaskStat+0x96>
            usage = (INT8S)(100L - 100L * run / OSIdleCtrMax);
     e3c:	a4 e6       	ldi	r26, 0x64	; 100
     e3e:	b0 e0       	ldi	r27, 0x00	; 0
     e40:	0e 94 6f 07 	call	0xede	; 0xede <__muluhisi3>
     e44:	a7 01       	movw	r20, r14
     e46:	96 01       	movw	r18, r12
     e48:	0e 94 3e 07 	call	0xe7c	; 0xe7c <__udivmodsi4>
     e4c:	8c 2f       	mov	r24, r28
     e4e:	82 1b       	sub	r24, r18
            if (usage > 100) {
     e50:	85 36       	cpi	r24, 0x65	; 101
     e52:	1c f0       	brlt	.+6      	; 0xe5a <OSTaskStat+0x86>
                OSCPUUsage = 100;
     e54:	c0 93 c3 06 	sts	0x06C3, r28
     e58:	0a c0       	rjmp	.+20     	; 0xe6e <OSTaskStat+0x9a>
            } else if (usage < 0) {
     e5a:	88 23       	and	r24, r24
     e5c:	1c f4       	brge	.+6      	; 0xe64 <OSTaskStat+0x90>
                OSCPUUsage =   0;
     e5e:	10 92 c3 06 	sts	0x06C3, r1
     e62:	05 c0       	rjmp	.+10     	; 0xe6e <OSTaskStat+0x9a>
            } else {
                OSCPUUsage = usage;
     e64:	80 93 c3 06 	sts	0x06C3, r24
     e68:	02 c0       	rjmp	.+4      	; 0xe6e <OSTaskStat+0x9a>
            }
        } else {
            OSCPUUsage = 0;
     e6a:	10 92 c3 06 	sts	0x06C3, r1
        }
        OSTaskStatHook();                        /* Invoke user definable hook                         */
     e6e:	0e 94 69 03 	call	0x6d2	; 0x6d2 <OSTaskStatHook>
        OSTimeDly(OS_TICKS_PER_SEC);             /* Accumulate OSIdleCtr for the next second           */
     e72:	88 ec       	ldi	r24, 0xC8	; 200
     e74:	90 e0       	ldi	r25, 0x00	; 0
     e76:	0e 94 a3 06 	call	0xd46	; 0xd46 <OSTimeDly>
    }
     e7a:	b9 cf       	rjmp	.-142    	; 0xdee <OSTaskStat+0x1a>

00000e7c <__udivmodsi4>:
     e7c:	a1 e2       	ldi	r26, 0x21	; 33
     e7e:	1a 2e       	mov	r1, r26
     e80:	aa 1b       	sub	r26, r26
     e82:	bb 1b       	sub	r27, r27
     e84:	fd 01       	movw	r30, r26
     e86:	0d c0       	rjmp	.+26     	; 0xea2 <__udivmodsi4_ep>

00000e88 <__udivmodsi4_loop>:
     e88:	aa 1f       	adc	r26, r26
     e8a:	bb 1f       	adc	r27, r27
     e8c:	ee 1f       	adc	r30, r30
     e8e:	ff 1f       	adc	r31, r31
     e90:	a2 17       	cp	r26, r18
     e92:	b3 07       	cpc	r27, r19
     e94:	e4 07       	cpc	r30, r20
     e96:	f5 07       	cpc	r31, r21
     e98:	20 f0       	brcs	.+8      	; 0xea2 <__udivmodsi4_ep>
     e9a:	a2 1b       	sub	r26, r18
     e9c:	b3 0b       	sbc	r27, r19
     e9e:	e4 0b       	sbc	r30, r20
     ea0:	f5 0b       	sbc	r31, r21

00000ea2 <__udivmodsi4_ep>:
     ea2:	66 1f       	adc	r22, r22
     ea4:	77 1f       	adc	r23, r23
     ea6:	88 1f       	adc	r24, r24
     ea8:	99 1f       	adc	r25, r25
     eaa:	1a 94       	dec	r1
     eac:	69 f7       	brne	.-38     	; 0xe88 <__udivmodsi4_loop>
     eae:	60 95       	com	r22
     eb0:	70 95       	com	r23
     eb2:	80 95       	com	r24
     eb4:	90 95       	com	r25
     eb6:	9b 01       	movw	r18, r22
     eb8:	ac 01       	movw	r20, r24
     eba:	bd 01       	movw	r22, r26
     ebc:	cf 01       	movw	r24, r30
     ebe:	08 95       	ret

00000ec0 <__umulhisi3>:
     ec0:	a2 9f       	mul	r26, r18
     ec2:	b0 01       	movw	r22, r0
     ec4:	b3 9f       	mul	r27, r19
     ec6:	c0 01       	movw	r24, r0
     ec8:	a3 9f       	mul	r26, r19
     eca:	70 0d       	add	r23, r0
     ecc:	81 1d       	adc	r24, r1
     ece:	11 24       	eor	r1, r1
     ed0:	91 1d       	adc	r25, r1
     ed2:	b2 9f       	mul	r27, r18
     ed4:	70 0d       	add	r23, r0
     ed6:	81 1d       	adc	r24, r1
     ed8:	11 24       	eor	r1, r1
     eda:	91 1d       	adc	r25, r1
     edc:	08 95       	ret

00000ede <__muluhisi3>:
     ede:	0e 94 60 07 	call	0xec0	; 0xec0 <__umulhisi3>
     ee2:	a5 9f       	mul	r26, r21
     ee4:	90 0d       	add	r25, r0
     ee6:	b4 9f       	mul	r27, r20
     ee8:	90 0d       	add	r25, r0
     eea:	a4 9f       	mul	r26, r20
     eec:	80 0d       	add	r24, r0
     eee:	91 1d       	adc	r25, r1
     ef0:	11 24       	eor	r1, r1
     ef2:	08 95       	ret

00000ef4 <fgetc>:
     ef4:	cf 93       	push	r28
     ef6:	df 93       	push	r29
     ef8:	ec 01       	movw	r28, r24
     efa:	2b 81       	ldd	r18, Y+3	; 0x03
     efc:	20 ff       	sbrs	r18, 0
     efe:	33 c0       	rjmp	.+102    	; 0xf66 <fgetc+0x72>
     f00:	26 ff       	sbrs	r18, 6
     f02:	0a c0       	rjmp	.+20     	; 0xf18 <fgetc+0x24>
     f04:	2f 7b       	andi	r18, 0xBF	; 191
     f06:	2b 83       	std	Y+3, r18	; 0x03
     f08:	8e 81       	ldd	r24, Y+6	; 0x06
     f0a:	9f 81       	ldd	r25, Y+7	; 0x07
     f0c:	01 96       	adiw	r24, 0x01	; 1
     f0e:	9f 83       	std	Y+7, r25	; 0x07
     f10:	8e 83       	std	Y+6, r24	; 0x06
     f12:	8a 81       	ldd	r24, Y+2	; 0x02
     f14:	90 e0       	ldi	r25, 0x00	; 0
     f16:	29 c0       	rjmp	.+82     	; 0xf6a <fgetc+0x76>
     f18:	22 ff       	sbrs	r18, 2
     f1a:	0f c0       	rjmp	.+30     	; 0xf3a <fgetc+0x46>
     f1c:	e8 81       	ld	r30, Y
     f1e:	f9 81       	ldd	r31, Y+1	; 0x01
     f20:	80 81       	ld	r24, Z
     f22:	99 27       	eor	r25, r25
     f24:	87 fd       	sbrc	r24, 7
     f26:	90 95       	com	r25
     f28:	00 97       	sbiw	r24, 0x00	; 0
     f2a:	19 f4       	brne	.+6      	; 0xf32 <fgetc+0x3e>
     f2c:	20 62       	ori	r18, 0x20	; 32
     f2e:	2b 83       	std	Y+3, r18	; 0x03
     f30:	1a c0       	rjmp	.+52     	; 0xf66 <fgetc+0x72>
     f32:	31 96       	adiw	r30, 0x01	; 1
     f34:	f9 83       	std	Y+1, r31	; 0x01
     f36:	e8 83       	st	Y, r30
     f38:	0e c0       	rjmp	.+28     	; 0xf56 <fgetc+0x62>
     f3a:	ea 85       	ldd	r30, Y+10	; 0x0a
     f3c:	fb 85       	ldd	r31, Y+11	; 0x0b
     f3e:	09 95       	icall
     f40:	97 ff       	sbrs	r25, 7
     f42:	09 c0       	rjmp	.+18     	; 0xf56 <fgetc+0x62>
     f44:	2b 81       	ldd	r18, Y+3	; 0x03
     f46:	01 96       	adiw	r24, 0x01	; 1
     f48:	11 f4       	brne	.+4      	; 0xf4e <fgetc+0x5a>
     f4a:	80 e1       	ldi	r24, 0x10	; 16
     f4c:	01 c0       	rjmp	.+2      	; 0xf50 <fgetc+0x5c>
     f4e:	80 e2       	ldi	r24, 0x20	; 32
     f50:	82 2b       	or	r24, r18
     f52:	8b 83       	std	Y+3, r24	; 0x03
     f54:	08 c0       	rjmp	.+16     	; 0xf66 <fgetc+0x72>
     f56:	2e 81       	ldd	r18, Y+6	; 0x06
     f58:	3f 81       	ldd	r19, Y+7	; 0x07
     f5a:	2f 5f       	subi	r18, 0xFF	; 255
     f5c:	3f 4f       	sbci	r19, 0xFF	; 255
     f5e:	3f 83       	std	Y+7, r19	; 0x07
     f60:	2e 83       	std	Y+6, r18	; 0x06
     f62:	99 27       	eor	r25, r25
     f64:	02 c0       	rjmp	.+4      	; 0xf6a <fgetc+0x76>
     f66:	8f ef       	ldi	r24, 0xFF	; 255
     f68:	9f ef       	ldi	r25, 0xFF	; 255
     f6a:	df 91       	pop	r29
     f6c:	cf 91       	pop	r28
     f6e:	08 95       	ret

00000f70 <printf>:
     f70:	a0 e0       	ldi	r26, 0x00	; 0
     f72:	b0 e0       	ldi	r27, 0x00	; 0
     f74:	ee eb       	ldi	r30, 0xBE	; 190
     f76:	f7 e0       	ldi	r31, 0x07	; 7
     f78:	0c 94 54 0a 	jmp	0x14a8	; 0x14a8 <__prologue_saves__+0x20>
     f7c:	fe 01       	movw	r30, r28
     f7e:	35 96       	adiw	r30, 0x05	; 5
     f80:	61 91       	ld	r22, Z+
     f82:	71 91       	ld	r23, Z+
     f84:	af 01       	movw	r20, r30
     f86:	80 91 a6 07 	lds	r24, 0x07A6
     f8a:	90 91 a7 07 	lds	r25, 0x07A7
     f8e:	0e 94 cc 07 	call	0xf98	; 0xf98 <vfprintf>
     f92:	e2 e0       	ldi	r30, 0x02	; 2
     f94:	0c 94 70 0a 	jmp	0x14e0	; 0x14e0 <__epilogue_restores__+0x20>

00000f98 <vfprintf>:
     f98:	ac e0       	ldi	r26, 0x0C	; 12
     f9a:	b0 e0       	ldi	r27, 0x00	; 0
     f9c:	e2 ed       	ldi	r30, 0xD2	; 210
     f9e:	f7 e0       	ldi	r31, 0x07	; 7
     fa0:	0c 94 44 0a 	jmp	0x1488	; 0x1488 <__prologue_saves__>
     fa4:	7c 01       	movw	r14, r24
     fa6:	6b 01       	movw	r12, r22
     fa8:	8a 01       	movw	r16, r20
     faa:	fc 01       	movw	r30, r24
     fac:	17 82       	std	Z+7, r1	; 0x07
     fae:	16 82       	std	Z+6, r1	; 0x06
     fb0:	83 81       	ldd	r24, Z+3	; 0x03
     fb2:	81 ff       	sbrs	r24, 1
     fb4:	bd c1       	rjmp	.+890    	; 0x1330 <vfprintf+0x398>
     fb6:	ce 01       	movw	r24, r28
     fb8:	01 96       	adiw	r24, 0x01	; 1
     fba:	4c 01       	movw	r8, r24
     fbc:	f7 01       	movw	r30, r14
     fbe:	93 81       	ldd	r25, Z+3	; 0x03
     fc0:	f6 01       	movw	r30, r12
     fc2:	93 fd       	sbrc	r25, 3
     fc4:	85 91       	lpm	r24, Z+
     fc6:	93 ff       	sbrs	r25, 3
     fc8:	81 91       	ld	r24, Z+
     fca:	6f 01       	movw	r12, r30
     fcc:	88 23       	and	r24, r24
     fce:	09 f4       	brne	.+2      	; 0xfd2 <vfprintf+0x3a>
     fd0:	ab c1       	rjmp	.+854    	; 0x1328 <vfprintf+0x390>
     fd2:	85 32       	cpi	r24, 0x25	; 37
     fd4:	39 f4       	brne	.+14     	; 0xfe4 <vfprintf+0x4c>
     fd6:	93 fd       	sbrc	r25, 3
     fd8:	85 91       	lpm	r24, Z+
     fda:	93 ff       	sbrs	r25, 3
     fdc:	81 91       	ld	r24, Z+
     fde:	6f 01       	movw	r12, r30
     fe0:	85 32       	cpi	r24, 0x25	; 37
     fe2:	29 f4       	brne	.+10     	; 0xfee <vfprintf+0x56>
     fe4:	b7 01       	movw	r22, r14
     fe6:	90 e0       	ldi	r25, 0x00	; 0
     fe8:	0e 94 b4 09 	call	0x1368	; 0x1368 <fputc>
     fec:	e7 cf       	rjmp	.-50     	; 0xfbc <vfprintf+0x24>
     fee:	51 2c       	mov	r5, r1
     ff0:	31 2c       	mov	r3, r1
     ff2:	20 e0       	ldi	r18, 0x00	; 0
     ff4:	20 32       	cpi	r18, 0x20	; 32
     ff6:	a0 f4       	brcc	.+40     	; 0x1020 <vfprintf+0x88>
     ff8:	8b 32       	cpi	r24, 0x2B	; 43
     ffa:	69 f0       	breq	.+26     	; 0x1016 <vfprintf+0x7e>
     ffc:	30 f4       	brcc	.+12     	; 0x100a <vfprintf+0x72>
     ffe:	80 32       	cpi	r24, 0x20	; 32
    1000:	59 f0       	breq	.+22     	; 0x1018 <vfprintf+0x80>
    1002:	83 32       	cpi	r24, 0x23	; 35
    1004:	69 f4       	brne	.+26     	; 0x1020 <vfprintf+0x88>
    1006:	20 61       	ori	r18, 0x10	; 16
    1008:	2c c0       	rjmp	.+88     	; 0x1062 <vfprintf+0xca>
    100a:	8d 32       	cpi	r24, 0x2D	; 45
    100c:	39 f0       	breq	.+14     	; 0x101c <vfprintf+0x84>
    100e:	80 33       	cpi	r24, 0x30	; 48
    1010:	39 f4       	brne	.+14     	; 0x1020 <vfprintf+0x88>
    1012:	21 60       	ori	r18, 0x01	; 1
    1014:	26 c0       	rjmp	.+76     	; 0x1062 <vfprintf+0xca>
    1016:	22 60       	ori	r18, 0x02	; 2
    1018:	24 60       	ori	r18, 0x04	; 4
    101a:	23 c0       	rjmp	.+70     	; 0x1062 <vfprintf+0xca>
    101c:	28 60       	ori	r18, 0x08	; 8
    101e:	21 c0       	rjmp	.+66     	; 0x1062 <vfprintf+0xca>
    1020:	27 fd       	sbrc	r18, 7
    1022:	27 c0       	rjmp	.+78     	; 0x1072 <vfprintf+0xda>
    1024:	30 ed       	ldi	r19, 0xD0	; 208
    1026:	38 0f       	add	r19, r24
    1028:	3a 30       	cpi	r19, 0x0A	; 10
    102a:	78 f4       	brcc	.+30     	; 0x104a <vfprintf+0xb2>
    102c:	26 ff       	sbrs	r18, 6
    102e:	06 c0       	rjmp	.+12     	; 0x103c <vfprintf+0xa4>
    1030:	fa e0       	ldi	r31, 0x0A	; 10
    1032:	5f 9e       	mul	r5, r31
    1034:	30 0d       	add	r19, r0
    1036:	11 24       	eor	r1, r1
    1038:	53 2e       	mov	r5, r19
    103a:	13 c0       	rjmp	.+38     	; 0x1062 <vfprintf+0xca>
    103c:	8a e0       	ldi	r24, 0x0A	; 10
    103e:	38 9e       	mul	r3, r24
    1040:	30 0d       	add	r19, r0
    1042:	11 24       	eor	r1, r1
    1044:	33 2e       	mov	r3, r19
    1046:	20 62       	ori	r18, 0x20	; 32
    1048:	0c c0       	rjmp	.+24     	; 0x1062 <vfprintf+0xca>
    104a:	8e 32       	cpi	r24, 0x2E	; 46
    104c:	21 f4       	brne	.+8      	; 0x1056 <vfprintf+0xbe>
    104e:	26 fd       	sbrc	r18, 6
    1050:	6b c1       	rjmp	.+726    	; 0x1328 <vfprintf+0x390>
    1052:	20 64       	ori	r18, 0x40	; 64
    1054:	06 c0       	rjmp	.+12     	; 0x1062 <vfprintf+0xca>
    1056:	8c 36       	cpi	r24, 0x6C	; 108
    1058:	11 f4       	brne	.+4      	; 0x105e <vfprintf+0xc6>
    105a:	20 68       	ori	r18, 0x80	; 128
    105c:	02 c0       	rjmp	.+4      	; 0x1062 <vfprintf+0xca>
    105e:	88 36       	cpi	r24, 0x68	; 104
    1060:	41 f4       	brne	.+16     	; 0x1072 <vfprintf+0xda>
    1062:	f6 01       	movw	r30, r12
    1064:	93 fd       	sbrc	r25, 3
    1066:	85 91       	lpm	r24, Z+
    1068:	93 ff       	sbrs	r25, 3
    106a:	81 91       	ld	r24, Z+
    106c:	6f 01       	movw	r12, r30
    106e:	81 11       	cpse	r24, r1
    1070:	c1 cf       	rjmp	.-126    	; 0xff4 <vfprintf+0x5c>
    1072:	98 2f       	mov	r25, r24
    1074:	9f 7d       	andi	r25, 0xDF	; 223
    1076:	95 54       	subi	r25, 0x45	; 69
    1078:	93 30       	cpi	r25, 0x03	; 3
    107a:	28 f4       	brcc	.+10     	; 0x1086 <vfprintf+0xee>
    107c:	0c 5f       	subi	r16, 0xFC	; 252
    107e:	1f 4f       	sbci	r17, 0xFF	; 255
    1080:	ff e3       	ldi	r31, 0x3F	; 63
    1082:	f9 83       	std	Y+1, r31	; 0x01
    1084:	0d c0       	rjmp	.+26     	; 0x10a0 <vfprintf+0x108>
    1086:	83 36       	cpi	r24, 0x63	; 99
    1088:	31 f0       	breq	.+12     	; 0x1096 <vfprintf+0xfe>
    108a:	83 37       	cpi	r24, 0x73	; 115
    108c:	71 f0       	breq	.+28     	; 0x10aa <vfprintf+0x112>
    108e:	83 35       	cpi	r24, 0x53	; 83
    1090:	09 f0       	breq	.+2      	; 0x1094 <vfprintf+0xfc>
    1092:	5b c0       	rjmp	.+182    	; 0x114a <vfprintf+0x1b2>
    1094:	22 c0       	rjmp	.+68     	; 0x10da <vfprintf+0x142>
    1096:	f8 01       	movw	r30, r16
    1098:	80 81       	ld	r24, Z
    109a:	89 83       	std	Y+1, r24	; 0x01
    109c:	0e 5f       	subi	r16, 0xFE	; 254
    109e:	1f 4f       	sbci	r17, 0xFF	; 255
    10a0:	44 24       	eor	r4, r4
    10a2:	43 94       	inc	r4
    10a4:	51 2c       	mov	r5, r1
    10a6:	54 01       	movw	r10, r8
    10a8:	15 c0       	rjmp	.+42     	; 0x10d4 <vfprintf+0x13c>
    10aa:	38 01       	movw	r6, r16
    10ac:	f2 e0       	ldi	r31, 0x02	; 2
    10ae:	6f 0e       	add	r6, r31
    10b0:	71 1c       	adc	r7, r1
    10b2:	f8 01       	movw	r30, r16
    10b4:	a0 80       	ld	r10, Z
    10b6:	b1 80       	ldd	r11, Z+1	; 0x01
    10b8:	26 ff       	sbrs	r18, 6
    10ba:	03 c0       	rjmp	.+6      	; 0x10c2 <vfprintf+0x12a>
    10bc:	65 2d       	mov	r22, r5
    10be:	70 e0       	ldi	r23, 0x00	; 0
    10c0:	02 c0       	rjmp	.+4      	; 0x10c6 <vfprintf+0x12e>
    10c2:	6f ef       	ldi	r22, 0xFF	; 255
    10c4:	7f ef       	ldi	r23, 0xFF	; 255
    10c6:	c5 01       	movw	r24, r10
    10c8:	2c 87       	std	Y+12, r18	; 0x0c
    10ca:	0e 94 a9 09 	call	0x1352	; 0x1352 <strnlen>
    10ce:	2c 01       	movw	r4, r24
    10d0:	83 01       	movw	r16, r6
    10d2:	2c 85       	ldd	r18, Y+12	; 0x0c
    10d4:	2f 77       	andi	r18, 0x7F	; 127
    10d6:	22 2e       	mov	r2, r18
    10d8:	17 c0       	rjmp	.+46     	; 0x1108 <vfprintf+0x170>
    10da:	38 01       	movw	r6, r16
    10dc:	f2 e0       	ldi	r31, 0x02	; 2
    10de:	6f 0e       	add	r6, r31
    10e0:	71 1c       	adc	r7, r1
    10e2:	f8 01       	movw	r30, r16
    10e4:	a0 80       	ld	r10, Z
    10e6:	b1 80       	ldd	r11, Z+1	; 0x01
    10e8:	26 ff       	sbrs	r18, 6
    10ea:	03 c0       	rjmp	.+6      	; 0x10f2 <vfprintf+0x15a>
    10ec:	65 2d       	mov	r22, r5
    10ee:	70 e0       	ldi	r23, 0x00	; 0
    10f0:	02 c0       	rjmp	.+4      	; 0x10f6 <vfprintf+0x15e>
    10f2:	6f ef       	ldi	r22, 0xFF	; 255
    10f4:	7f ef       	ldi	r23, 0xFF	; 255
    10f6:	c5 01       	movw	r24, r10
    10f8:	2c 87       	std	Y+12, r18	; 0x0c
    10fa:	0e 94 9e 09 	call	0x133c	; 0x133c <strnlen_P>
    10fe:	2c 01       	movw	r4, r24
    1100:	2c 85       	ldd	r18, Y+12	; 0x0c
    1102:	20 68       	ori	r18, 0x80	; 128
    1104:	22 2e       	mov	r2, r18
    1106:	83 01       	movw	r16, r6
    1108:	23 fc       	sbrc	r2, 3
    110a:	1b c0       	rjmp	.+54     	; 0x1142 <vfprintf+0x1aa>
    110c:	83 2d       	mov	r24, r3
    110e:	90 e0       	ldi	r25, 0x00	; 0
    1110:	48 16       	cp	r4, r24
    1112:	59 06       	cpc	r5, r25
    1114:	b0 f4       	brcc	.+44     	; 0x1142 <vfprintf+0x1aa>
    1116:	b7 01       	movw	r22, r14
    1118:	80 e2       	ldi	r24, 0x20	; 32
    111a:	90 e0       	ldi	r25, 0x00	; 0
    111c:	0e 94 b4 09 	call	0x1368	; 0x1368 <fputc>
    1120:	3a 94       	dec	r3
    1122:	f4 cf       	rjmp	.-24     	; 0x110c <vfprintf+0x174>
    1124:	f5 01       	movw	r30, r10
    1126:	27 fc       	sbrc	r2, 7
    1128:	85 91       	lpm	r24, Z+
    112a:	27 fe       	sbrs	r2, 7
    112c:	81 91       	ld	r24, Z+
    112e:	5f 01       	movw	r10, r30
    1130:	b7 01       	movw	r22, r14
    1132:	90 e0       	ldi	r25, 0x00	; 0
    1134:	0e 94 b4 09 	call	0x1368	; 0x1368 <fputc>
    1138:	31 10       	cpse	r3, r1
    113a:	3a 94       	dec	r3
    113c:	f1 e0       	ldi	r31, 0x01	; 1
    113e:	4f 1a       	sub	r4, r31
    1140:	51 08       	sbc	r5, r1
    1142:	41 14       	cp	r4, r1
    1144:	51 04       	cpc	r5, r1
    1146:	71 f7       	brne	.-36     	; 0x1124 <vfprintf+0x18c>
    1148:	e5 c0       	rjmp	.+458    	; 0x1314 <vfprintf+0x37c>
    114a:	84 36       	cpi	r24, 0x64	; 100
    114c:	11 f0       	breq	.+4      	; 0x1152 <vfprintf+0x1ba>
    114e:	89 36       	cpi	r24, 0x69	; 105
    1150:	39 f5       	brne	.+78     	; 0x11a0 <vfprintf+0x208>
    1152:	f8 01       	movw	r30, r16
    1154:	27 ff       	sbrs	r18, 7
    1156:	07 c0       	rjmp	.+14     	; 0x1166 <vfprintf+0x1ce>
    1158:	60 81       	ld	r22, Z
    115a:	71 81       	ldd	r23, Z+1	; 0x01
    115c:	82 81       	ldd	r24, Z+2	; 0x02
    115e:	93 81       	ldd	r25, Z+3	; 0x03
    1160:	0c 5f       	subi	r16, 0xFC	; 252
    1162:	1f 4f       	sbci	r17, 0xFF	; 255
    1164:	08 c0       	rjmp	.+16     	; 0x1176 <vfprintf+0x1de>
    1166:	60 81       	ld	r22, Z
    1168:	71 81       	ldd	r23, Z+1	; 0x01
    116a:	88 27       	eor	r24, r24
    116c:	77 fd       	sbrc	r23, 7
    116e:	80 95       	com	r24
    1170:	98 2f       	mov	r25, r24
    1172:	0e 5f       	subi	r16, 0xFE	; 254
    1174:	1f 4f       	sbci	r17, 0xFF	; 255
    1176:	2f 76       	andi	r18, 0x6F	; 111
    1178:	b2 2e       	mov	r11, r18
    117a:	97 ff       	sbrs	r25, 7
    117c:	09 c0       	rjmp	.+18     	; 0x1190 <vfprintf+0x1f8>
    117e:	90 95       	com	r25
    1180:	80 95       	com	r24
    1182:	70 95       	com	r23
    1184:	61 95       	neg	r22
    1186:	7f 4f       	sbci	r23, 0xFF	; 255
    1188:	8f 4f       	sbci	r24, 0xFF	; 255
    118a:	9f 4f       	sbci	r25, 0xFF	; 255
    118c:	20 68       	ori	r18, 0x80	; 128
    118e:	b2 2e       	mov	r11, r18
    1190:	2a e0       	ldi	r18, 0x0A	; 10
    1192:	30 e0       	ldi	r19, 0x00	; 0
    1194:	a4 01       	movw	r20, r8
    1196:	0e 94 e6 09 	call	0x13cc	; 0x13cc <__ultoa_invert>
    119a:	a8 2e       	mov	r10, r24
    119c:	a8 18       	sub	r10, r8
    119e:	44 c0       	rjmp	.+136    	; 0x1228 <vfprintf+0x290>
    11a0:	85 37       	cpi	r24, 0x75	; 117
    11a2:	29 f4       	brne	.+10     	; 0x11ae <vfprintf+0x216>
    11a4:	2f 7e       	andi	r18, 0xEF	; 239
    11a6:	b2 2e       	mov	r11, r18
    11a8:	2a e0       	ldi	r18, 0x0A	; 10
    11aa:	30 e0       	ldi	r19, 0x00	; 0
    11ac:	25 c0       	rjmp	.+74     	; 0x11f8 <vfprintf+0x260>
    11ae:	f2 2f       	mov	r31, r18
    11b0:	f9 7f       	andi	r31, 0xF9	; 249
    11b2:	bf 2e       	mov	r11, r31
    11b4:	8f 36       	cpi	r24, 0x6F	; 111
    11b6:	c1 f0       	breq	.+48     	; 0x11e8 <vfprintf+0x250>
    11b8:	18 f4       	brcc	.+6      	; 0x11c0 <vfprintf+0x228>
    11ba:	88 35       	cpi	r24, 0x58	; 88
    11bc:	79 f0       	breq	.+30     	; 0x11dc <vfprintf+0x244>
    11be:	b4 c0       	rjmp	.+360    	; 0x1328 <vfprintf+0x390>
    11c0:	80 37       	cpi	r24, 0x70	; 112
    11c2:	19 f0       	breq	.+6      	; 0x11ca <vfprintf+0x232>
    11c4:	88 37       	cpi	r24, 0x78	; 120
    11c6:	21 f0       	breq	.+8      	; 0x11d0 <vfprintf+0x238>
    11c8:	af c0       	rjmp	.+350    	; 0x1328 <vfprintf+0x390>
    11ca:	2f 2f       	mov	r18, r31
    11cc:	20 61       	ori	r18, 0x10	; 16
    11ce:	b2 2e       	mov	r11, r18
    11d0:	b4 fe       	sbrs	r11, 4
    11d2:	0d c0       	rjmp	.+26     	; 0x11ee <vfprintf+0x256>
    11d4:	8b 2d       	mov	r24, r11
    11d6:	84 60       	ori	r24, 0x04	; 4
    11d8:	b8 2e       	mov	r11, r24
    11da:	09 c0       	rjmp	.+18     	; 0x11ee <vfprintf+0x256>
    11dc:	24 ff       	sbrs	r18, 4
    11de:	0a c0       	rjmp	.+20     	; 0x11f4 <vfprintf+0x25c>
    11e0:	9f 2f       	mov	r25, r31
    11e2:	96 60       	ori	r25, 0x06	; 6
    11e4:	b9 2e       	mov	r11, r25
    11e6:	06 c0       	rjmp	.+12     	; 0x11f4 <vfprintf+0x25c>
    11e8:	28 e0       	ldi	r18, 0x08	; 8
    11ea:	30 e0       	ldi	r19, 0x00	; 0
    11ec:	05 c0       	rjmp	.+10     	; 0x11f8 <vfprintf+0x260>
    11ee:	20 e1       	ldi	r18, 0x10	; 16
    11f0:	30 e0       	ldi	r19, 0x00	; 0
    11f2:	02 c0       	rjmp	.+4      	; 0x11f8 <vfprintf+0x260>
    11f4:	20 e1       	ldi	r18, 0x10	; 16
    11f6:	32 e0       	ldi	r19, 0x02	; 2
    11f8:	f8 01       	movw	r30, r16
    11fa:	b7 fe       	sbrs	r11, 7
    11fc:	07 c0       	rjmp	.+14     	; 0x120c <vfprintf+0x274>
    11fe:	60 81       	ld	r22, Z
    1200:	71 81       	ldd	r23, Z+1	; 0x01
    1202:	82 81       	ldd	r24, Z+2	; 0x02
    1204:	93 81       	ldd	r25, Z+3	; 0x03
    1206:	0c 5f       	subi	r16, 0xFC	; 252
    1208:	1f 4f       	sbci	r17, 0xFF	; 255
    120a:	06 c0       	rjmp	.+12     	; 0x1218 <vfprintf+0x280>
    120c:	60 81       	ld	r22, Z
    120e:	71 81       	ldd	r23, Z+1	; 0x01
    1210:	80 e0       	ldi	r24, 0x00	; 0
    1212:	90 e0       	ldi	r25, 0x00	; 0
    1214:	0e 5f       	subi	r16, 0xFE	; 254
    1216:	1f 4f       	sbci	r17, 0xFF	; 255
    1218:	a4 01       	movw	r20, r8
    121a:	0e 94 e6 09 	call	0x13cc	; 0x13cc <__ultoa_invert>
    121e:	a8 2e       	mov	r10, r24
    1220:	a8 18       	sub	r10, r8
    1222:	fb 2d       	mov	r31, r11
    1224:	ff 77       	andi	r31, 0x7F	; 127
    1226:	bf 2e       	mov	r11, r31
    1228:	b6 fe       	sbrs	r11, 6
    122a:	0b c0       	rjmp	.+22     	; 0x1242 <vfprintf+0x2aa>
    122c:	2b 2d       	mov	r18, r11
    122e:	2e 7f       	andi	r18, 0xFE	; 254
    1230:	a5 14       	cp	r10, r5
    1232:	50 f4       	brcc	.+20     	; 0x1248 <vfprintf+0x2b0>
    1234:	b4 fe       	sbrs	r11, 4
    1236:	0a c0       	rjmp	.+20     	; 0x124c <vfprintf+0x2b4>
    1238:	b2 fc       	sbrc	r11, 2
    123a:	08 c0       	rjmp	.+16     	; 0x124c <vfprintf+0x2b4>
    123c:	2b 2d       	mov	r18, r11
    123e:	2e 7e       	andi	r18, 0xEE	; 238
    1240:	05 c0       	rjmp	.+10     	; 0x124c <vfprintf+0x2b4>
    1242:	7a 2c       	mov	r7, r10
    1244:	2b 2d       	mov	r18, r11
    1246:	03 c0       	rjmp	.+6      	; 0x124e <vfprintf+0x2b6>
    1248:	7a 2c       	mov	r7, r10
    124a:	01 c0       	rjmp	.+2      	; 0x124e <vfprintf+0x2b6>
    124c:	75 2c       	mov	r7, r5
    124e:	24 ff       	sbrs	r18, 4
    1250:	0d c0       	rjmp	.+26     	; 0x126c <vfprintf+0x2d4>
    1252:	fe 01       	movw	r30, r28
    1254:	ea 0d       	add	r30, r10
    1256:	f1 1d       	adc	r31, r1
    1258:	80 81       	ld	r24, Z
    125a:	80 33       	cpi	r24, 0x30	; 48
    125c:	11 f4       	brne	.+4      	; 0x1262 <vfprintf+0x2ca>
    125e:	29 7e       	andi	r18, 0xE9	; 233
    1260:	09 c0       	rjmp	.+18     	; 0x1274 <vfprintf+0x2dc>
    1262:	22 ff       	sbrs	r18, 2
    1264:	06 c0       	rjmp	.+12     	; 0x1272 <vfprintf+0x2da>
    1266:	73 94       	inc	r7
    1268:	73 94       	inc	r7
    126a:	04 c0       	rjmp	.+8      	; 0x1274 <vfprintf+0x2dc>
    126c:	82 2f       	mov	r24, r18
    126e:	86 78       	andi	r24, 0x86	; 134
    1270:	09 f0       	breq	.+2      	; 0x1274 <vfprintf+0x2dc>
    1272:	73 94       	inc	r7
    1274:	23 fd       	sbrc	r18, 3
    1276:	13 c0       	rjmp	.+38     	; 0x129e <vfprintf+0x306>
    1278:	20 ff       	sbrs	r18, 0
    127a:	06 c0       	rjmp	.+12     	; 0x1288 <vfprintf+0x2f0>
    127c:	5a 2c       	mov	r5, r10
    127e:	73 14       	cp	r7, r3
    1280:	18 f4       	brcc	.+6      	; 0x1288 <vfprintf+0x2f0>
    1282:	53 0c       	add	r5, r3
    1284:	57 18       	sub	r5, r7
    1286:	73 2c       	mov	r7, r3
    1288:	73 14       	cp	r7, r3
    128a:	68 f4       	brcc	.+26     	; 0x12a6 <vfprintf+0x30e>
    128c:	b7 01       	movw	r22, r14
    128e:	80 e2       	ldi	r24, 0x20	; 32
    1290:	90 e0       	ldi	r25, 0x00	; 0
    1292:	2c 87       	std	Y+12, r18	; 0x0c
    1294:	0e 94 b4 09 	call	0x1368	; 0x1368 <fputc>
    1298:	73 94       	inc	r7
    129a:	2c 85       	ldd	r18, Y+12	; 0x0c
    129c:	f5 cf       	rjmp	.-22     	; 0x1288 <vfprintf+0x2f0>
    129e:	73 14       	cp	r7, r3
    12a0:	10 f4       	brcc	.+4      	; 0x12a6 <vfprintf+0x30e>
    12a2:	37 18       	sub	r3, r7
    12a4:	01 c0       	rjmp	.+2      	; 0x12a8 <vfprintf+0x310>
    12a6:	31 2c       	mov	r3, r1
    12a8:	24 ff       	sbrs	r18, 4
    12aa:	12 c0       	rjmp	.+36     	; 0x12d0 <vfprintf+0x338>
    12ac:	b7 01       	movw	r22, r14
    12ae:	80 e3       	ldi	r24, 0x30	; 48
    12b0:	90 e0       	ldi	r25, 0x00	; 0
    12b2:	2c 87       	std	Y+12, r18	; 0x0c
    12b4:	0e 94 b4 09 	call	0x1368	; 0x1368 <fputc>
    12b8:	2c 85       	ldd	r18, Y+12	; 0x0c
    12ba:	22 ff       	sbrs	r18, 2
    12bc:	17 c0       	rjmp	.+46     	; 0x12ec <vfprintf+0x354>
    12be:	21 ff       	sbrs	r18, 1
    12c0:	03 c0       	rjmp	.+6      	; 0x12c8 <vfprintf+0x330>
    12c2:	88 e5       	ldi	r24, 0x58	; 88
    12c4:	90 e0       	ldi	r25, 0x00	; 0
    12c6:	02 c0       	rjmp	.+4      	; 0x12cc <vfprintf+0x334>
    12c8:	88 e7       	ldi	r24, 0x78	; 120
    12ca:	90 e0       	ldi	r25, 0x00	; 0
    12cc:	b7 01       	movw	r22, r14
    12ce:	0c c0       	rjmp	.+24     	; 0x12e8 <vfprintf+0x350>
    12d0:	82 2f       	mov	r24, r18
    12d2:	86 78       	andi	r24, 0x86	; 134
    12d4:	59 f0       	breq	.+22     	; 0x12ec <vfprintf+0x354>
    12d6:	21 fd       	sbrc	r18, 1
    12d8:	02 c0       	rjmp	.+4      	; 0x12de <vfprintf+0x346>
    12da:	80 e2       	ldi	r24, 0x20	; 32
    12dc:	01 c0       	rjmp	.+2      	; 0x12e0 <vfprintf+0x348>
    12de:	8b e2       	ldi	r24, 0x2B	; 43
    12e0:	27 fd       	sbrc	r18, 7
    12e2:	8d e2       	ldi	r24, 0x2D	; 45
    12e4:	b7 01       	movw	r22, r14
    12e6:	90 e0       	ldi	r25, 0x00	; 0
    12e8:	0e 94 b4 09 	call	0x1368	; 0x1368 <fputc>
    12ec:	a5 14       	cp	r10, r5
    12ee:	38 f4       	brcc	.+14     	; 0x12fe <vfprintf+0x366>
    12f0:	b7 01       	movw	r22, r14
    12f2:	80 e3       	ldi	r24, 0x30	; 48
    12f4:	90 e0       	ldi	r25, 0x00	; 0
    12f6:	0e 94 b4 09 	call	0x1368	; 0x1368 <fputc>
    12fa:	5a 94       	dec	r5
    12fc:	f7 cf       	rjmp	.-18     	; 0x12ec <vfprintf+0x354>
    12fe:	aa 94       	dec	r10
    1300:	f4 01       	movw	r30, r8
    1302:	ea 0d       	add	r30, r10
    1304:	f1 1d       	adc	r31, r1
    1306:	80 81       	ld	r24, Z
    1308:	b7 01       	movw	r22, r14
    130a:	90 e0       	ldi	r25, 0x00	; 0
    130c:	0e 94 b4 09 	call	0x1368	; 0x1368 <fputc>
    1310:	a1 10       	cpse	r10, r1
    1312:	f5 cf       	rjmp	.-22     	; 0x12fe <vfprintf+0x366>
    1314:	33 20       	and	r3, r3
    1316:	09 f4       	brne	.+2      	; 0x131a <vfprintf+0x382>
    1318:	51 ce       	rjmp	.-862    	; 0xfbc <vfprintf+0x24>
    131a:	b7 01       	movw	r22, r14
    131c:	80 e2       	ldi	r24, 0x20	; 32
    131e:	90 e0       	ldi	r25, 0x00	; 0
    1320:	0e 94 b4 09 	call	0x1368	; 0x1368 <fputc>
    1324:	3a 94       	dec	r3
    1326:	f6 cf       	rjmp	.-20     	; 0x1314 <vfprintf+0x37c>
    1328:	f7 01       	movw	r30, r14
    132a:	86 81       	ldd	r24, Z+6	; 0x06
    132c:	97 81       	ldd	r25, Z+7	; 0x07
    132e:	02 c0       	rjmp	.+4      	; 0x1334 <vfprintf+0x39c>
    1330:	8f ef       	ldi	r24, 0xFF	; 255
    1332:	9f ef       	ldi	r25, 0xFF	; 255
    1334:	2c 96       	adiw	r28, 0x0c	; 12
    1336:	e2 e1       	ldi	r30, 0x12	; 18
    1338:	0c 94 60 0a 	jmp	0x14c0	; 0x14c0 <__epilogue_restores__>

0000133c <strnlen_P>:
    133c:	fc 01       	movw	r30, r24
    133e:	05 90       	lpm	r0, Z+
    1340:	61 50       	subi	r22, 0x01	; 1
    1342:	70 40       	sbci	r23, 0x00	; 0
    1344:	01 10       	cpse	r0, r1
    1346:	d8 f7       	brcc	.-10     	; 0x133e <strnlen_P+0x2>
    1348:	80 95       	com	r24
    134a:	90 95       	com	r25
    134c:	8e 0f       	add	r24, r30
    134e:	9f 1f       	adc	r25, r31
    1350:	08 95       	ret

00001352 <strnlen>:
    1352:	fc 01       	movw	r30, r24
    1354:	61 50       	subi	r22, 0x01	; 1
    1356:	70 40       	sbci	r23, 0x00	; 0
    1358:	01 90       	ld	r0, Z+
    135a:	01 10       	cpse	r0, r1
    135c:	d8 f7       	brcc	.-10     	; 0x1354 <strnlen+0x2>
    135e:	80 95       	com	r24
    1360:	90 95       	com	r25
    1362:	8e 0f       	add	r24, r30
    1364:	9f 1f       	adc	r25, r31
    1366:	08 95       	ret

00001368 <fputc>:
    1368:	0f 93       	push	r16
    136a:	1f 93       	push	r17
    136c:	cf 93       	push	r28
    136e:	df 93       	push	r29
    1370:	18 2f       	mov	r17, r24
    1372:	09 2f       	mov	r16, r25
    1374:	eb 01       	movw	r28, r22
    1376:	8b 81       	ldd	r24, Y+3	; 0x03
    1378:	81 fd       	sbrc	r24, 1
    137a:	03 c0       	rjmp	.+6      	; 0x1382 <fputc+0x1a>
    137c:	8f ef       	ldi	r24, 0xFF	; 255
    137e:	9f ef       	ldi	r25, 0xFF	; 255
    1380:	20 c0       	rjmp	.+64     	; 0x13c2 <fputc+0x5a>
    1382:	82 ff       	sbrs	r24, 2
    1384:	10 c0       	rjmp	.+32     	; 0x13a6 <fputc+0x3e>
    1386:	4e 81       	ldd	r20, Y+6	; 0x06
    1388:	5f 81       	ldd	r21, Y+7	; 0x07
    138a:	2c 81       	ldd	r18, Y+4	; 0x04
    138c:	3d 81       	ldd	r19, Y+5	; 0x05
    138e:	42 17       	cp	r20, r18
    1390:	53 07       	cpc	r21, r19
    1392:	7c f4       	brge	.+30     	; 0x13b2 <fputc+0x4a>
    1394:	e8 81       	ld	r30, Y
    1396:	f9 81       	ldd	r31, Y+1	; 0x01
    1398:	9f 01       	movw	r18, r30
    139a:	2f 5f       	subi	r18, 0xFF	; 255
    139c:	3f 4f       	sbci	r19, 0xFF	; 255
    139e:	39 83       	std	Y+1, r19	; 0x01
    13a0:	28 83       	st	Y, r18
    13a2:	10 83       	st	Z, r17
    13a4:	06 c0       	rjmp	.+12     	; 0x13b2 <fputc+0x4a>
    13a6:	e8 85       	ldd	r30, Y+8	; 0x08
    13a8:	f9 85       	ldd	r31, Y+9	; 0x09
    13aa:	81 2f       	mov	r24, r17
    13ac:	09 95       	icall
    13ae:	89 2b       	or	r24, r25
    13b0:	29 f7       	brne	.-54     	; 0x137c <fputc+0x14>
    13b2:	2e 81       	ldd	r18, Y+6	; 0x06
    13b4:	3f 81       	ldd	r19, Y+7	; 0x07
    13b6:	2f 5f       	subi	r18, 0xFF	; 255
    13b8:	3f 4f       	sbci	r19, 0xFF	; 255
    13ba:	3f 83       	std	Y+7, r19	; 0x07
    13bc:	2e 83       	std	Y+6, r18	; 0x06
    13be:	81 2f       	mov	r24, r17
    13c0:	90 2f       	mov	r25, r16
    13c2:	df 91       	pop	r29
    13c4:	cf 91       	pop	r28
    13c6:	1f 91       	pop	r17
    13c8:	0f 91       	pop	r16
    13ca:	08 95       	ret

000013cc <__ultoa_invert>:
    13cc:	fa 01       	movw	r30, r20
    13ce:	aa 27       	eor	r26, r26
    13d0:	28 30       	cpi	r18, 0x08	; 8
    13d2:	51 f1       	breq	.+84     	; 0x1428 <__ultoa_invert+0x5c>
    13d4:	20 31       	cpi	r18, 0x10	; 16
    13d6:	81 f1       	breq	.+96     	; 0x1438 <__ultoa_invert+0x6c>
    13d8:	e8 94       	clt
    13da:	6f 93       	push	r22
    13dc:	6e 7f       	andi	r22, 0xFE	; 254
    13de:	6e 5f       	subi	r22, 0xFE	; 254
    13e0:	7f 4f       	sbci	r23, 0xFF	; 255
    13e2:	8f 4f       	sbci	r24, 0xFF	; 255
    13e4:	9f 4f       	sbci	r25, 0xFF	; 255
    13e6:	af 4f       	sbci	r26, 0xFF	; 255
    13e8:	b1 e0       	ldi	r27, 0x01	; 1
    13ea:	3e d0       	rcall	.+124    	; 0x1468 <__ultoa_invert+0x9c>
    13ec:	b4 e0       	ldi	r27, 0x04	; 4
    13ee:	3c d0       	rcall	.+120    	; 0x1468 <__ultoa_invert+0x9c>
    13f0:	67 0f       	add	r22, r23
    13f2:	78 1f       	adc	r23, r24
    13f4:	89 1f       	adc	r24, r25
    13f6:	9a 1f       	adc	r25, r26
    13f8:	a1 1d       	adc	r26, r1
    13fa:	68 0f       	add	r22, r24
    13fc:	79 1f       	adc	r23, r25
    13fe:	8a 1f       	adc	r24, r26
    1400:	91 1d       	adc	r25, r1
    1402:	a1 1d       	adc	r26, r1
    1404:	6a 0f       	add	r22, r26
    1406:	71 1d       	adc	r23, r1
    1408:	81 1d       	adc	r24, r1
    140a:	91 1d       	adc	r25, r1
    140c:	a1 1d       	adc	r26, r1
    140e:	20 d0       	rcall	.+64     	; 0x1450 <__ultoa_invert+0x84>
    1410:	09 f4       	brne	.+2      	; 0x1414 <__ultoa_invert+0x48>
    1412:	68 94       	set
    1414:	3f 91       	pop	r19
    1416:	2a e0       	ldi	r18, 0x0A	; 10
    1418:	26 9f       	mul	r18, r22
    141a:	11 24       	eor	r1, r1
    141c:	30 19       	sub	r19, r0
    141e:	30 5d       	subi	r19, 0xD0	; 208
    1420:	31 93       	st	Z+, r19
    1422:	de f6       	brtc	.-74     	; 0x13da <__ultoa_invert+0xe>
    1424:	cf 01       	movw	r24, r30
    1426:	08 95       	ret
    1428:	46 2f       	mov	r20, r22
    142a:	47 70       	andi	r20, 0x07	; 7
    142c:	40 5d       	subi	r20, 0xD0	; 208
    142e:	41 93       	st	Z+, r20
    1430:	b3 e0       	ldi	r27, 0x03	; 3
    1432:	0f d0       	rcall	.+30     	; 0x1452 <__ultoa_invert+0x86>
    1434:	c9 f7       	brne	.-14     	; 0x1428 <__ultoa_invert+0x5c>
    1436:	f6 cf       	rjmp	.-20     	; 0x1424 <__ultoa_invert+0x58>
    1438:	46 2f       	mov	r20, r22
    143a:	4f 70       	andi	r20, 0x0F	; 15
    143c:	40 5d       	subi	r20, 0xD0	; 208
    143e:	4a 33       	cpi	r20, 0x3A	; 58
    1440:	18 f0       	brcs	.+6      	; 0x1448 <__ultoa_invert+0x7c>
    1442:	49 5d       	subi	r20, 0xD9	; 217
    1444:	31 fd       	sbrc	r19, 1
    1446:	40 52       	subi	r20, 0x20	; 32
    1448:	41 93       	st	Z+, r20
    144a:	02 d0       	rcall	.+4      	; 0x1450 <__ultoa_invert+0x84>
    144c:	a9 f7       	brne	.-22     	; 0x1438 <__ultoa_invert+0x6c>
    144e:	ea cf       	rjmp	.-44     	; 0x1424 <__ultoa_invert+0x58>
    1450:	b4 e0       	ldi	r27, 0x04	; 4
    1452:	a6 95       	lsr	r26
    1454:	97 95       	ror	r25
    1456:	87 95       	ror	r24
    1458:	77 95       	ror	r23
    145a:	67 95       	ror	r22
    145c:	ba 95       	dec	r27
    145e:	c9 f7       	brne	.-14     	; 0x1452 <__ultoa_invert+0x86>
    1460:	00 97       	sbiw	r24, 0x00	; 0
    1462:	61 05       	cpc	r22, r1
    1464:	71 05       	cpc	r23, r1
    1466:	08 95       	ret
    1468:	9b 01       	movw	r18, r22
    146a:	ac 01       	movw	r20, r24
    146c:	0a 2e       	mov	r0, r26
    146e:	06 94       	lsr	r0
    1470:	57 95       	ror	r21
    1472:	47 95       	ror	r20
    1474:	37 95       	ror	r19
    1476:	27 95       	ror	r18
    1478:	ba 95       	dec	r27
    147a:	c9 f7       	brne	.-14     	; 0x146e <__ultoa_invert+0xa2>
    147c:	62 0f       	add	r22, r18
    147e:	73 1f       	adc	r23, r19
    1480:	84 1f       	adc	r24, r20
    1482:	95 1f       	adc	r25, r21
    1484:	a0 1d       	adc	r26, r0
    1486:	08 95       	ret

00001488 <__prologue_saves__>:
    1488:	2f 92       	push	r2
    148a:	3f 92       	push	r3
    148c:	4f 92       	push	r4
    148e:	5f 92       	push	r5
    1490:	6f 92       	push	r6
    1492:	7f 92       	push	r7
    1494:	8f 92       	push	r8
    1496:	9f 92       	push	r9
    1498:	af 92       	push	r10
    149a:	bf 92       	push	r11
    149c:	cf 92       	push	r12
    149e:	df 92       	push	r13
    14a0:	ef 92       	push	r14
    14a2:	ff 92       	push	r15
    14a4:	0f 93       	push	r16
    14a6:	1f 93       	push	r17
    14a8:	cf 93       	push	r28
    14aa:	df 93       	push	r29
    14ac:	cd b7       	in	r28, 0x3d	; 61
    14ae:	de b7       	in	r29, 0x3e	; 62
    14b0:	ca 1b       	sub	r28, r26
    14b2:	db 0b       	sbc	r29, r27
    14b4:	0f b6       	in	r0, 0x3f	; 63
    14b6:	f8 94       	cli
    14b8:	de bf       	out	0x3e, r29	; 62
    14ba:	0f be       	out	0x3f, r0	; 63
    14bc:	cd bf       	out	0x3d, r28	; 61
    14be:	09 94       	ijmp

000014c0 <__epilogue_restores__>:
    14c0:	2a 88       	ldd	r2, Y+18	; 0x12
    14c2:	39 88       	ldd	r3, Y+17	; 0x11
    14c4:	48 88       	ldd	r4, Y+16	; 0x10
    14c6:	5f 84       	ldd	r5, Y+15	; 0x0f
    14c8:	6e 84       	ldd	r6, Y+14	; 0x0e
    14ca:	7d 84       	ldd	r7, Y+13	; 0x0d
    14cc:	8c 84       	ldd	r8, Y+12	; 0x0c
    14ce:	9b 84       	ldd	r9, Y+11	; 0x0b
    14d0:	aa 84       	ldd	r10, Y+10	; 0x0a
    14d2:	b9 84       	ldd	r11, Y+9	; 0x09
    14d4:	c8 84       	ldd	r12, Y+8	; 0x08
    14d6:	df 80       	ldd	r13, Y+7	; 0x07
    14d8:	ee 80       	ldd	r14, Y+6	; 0x06
    14da:	fd 80       	ldd	r15, Y+5	; 0x05
    14dc:	0c 81       	ldd	r16, Y+4	; 0x04
    14de:	1b 81       	ldd	r17, Y+3	; 0x03
    14e0:	aa 81       	ldd	r26, Y+2	; 0x02
    14e2:	b9 81       	ldd	r27, Y+1	; 0x01
    14e4:	ce 0f       	add	r28, r30
    14e6:	d1 1d       	adc	r29, r1
    14e8:	0f b6       	in	r0, 0x3f	; 63
    14ea:	f8 94       	cli
    14ec:	de bf       	out	0x3e, r29	; 62
    14ee:	0f be       	out	0x3f, r0	; 63
    14f0:	cd bf       	out	0x3d, r28	; 61
    14f2:	ed 01       	movw	r28, r26
    14f4:	08 95       	ret

000014f6 <_exit>:
    14f6:	f8 94       	cli

000014f8 <__stop_program>:
    14f8:	ff cf       	rjmp	.-2      	; 0x14f8 <__stop_program>
